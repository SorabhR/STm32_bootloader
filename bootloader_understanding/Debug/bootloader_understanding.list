
bootloader_understanding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080090bc  080090bc  0000a0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009398  08009398  0000b158  2**0
                  CONTENTS
  4 .ARM          00000008  08009398  08009398  0000a398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a0  080093a0  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093a4  080093a4  0000a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080093a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b158  2**0
                  CONTENTS
 10 .bss          000021e0  20000158  20000158  0000b158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002338  20002338  0000b158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff99  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e7  00000000  00000000  0001b121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  0001e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4f  00000000  00000000  0001f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023edf  00000000  00000000  00020047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013285  00000000  00000000  00043f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a0f  00000000  00000000  000571ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011dbba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e84  00000000  00000000  0011dc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00121a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090a4 	.word	0x080090a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080090a4 	.word	0x080090a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 8000566:	2300      	movs	r3, #0
 8000568:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 800056a:	4820      	ldr	r0, [pc, #128]	@ (80005ec <etx_ota_download_and_flash+0x8c>)
 800056c:	f007 ff28 	bl	80083c0 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <etx_ota_download_and_flash+0x90>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 8000576:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <etx_ota_download_and_flash+0x94>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 800057c:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <etx_ota_download_and_flash+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 8000582:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <etx_ota_download_and_flash+0x9c>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000588:	223b      	movs	r2, #59	@ 0x3b
 800058a:	2100      	movs	r1, #0
 800058c:	481c      	ldr	r0, [pc, #112]	@ (8000600 <etx_ota_download_and_flash+0xa0>)
 800058e:	f007 fff7 	bl	8008580 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 8000592:	213b      	movs	r1, #59	@ 0x3b
 8000594:	481a      	ldr	r0, [pc, #104]	@ (8000600 <etx_ota_download_and_flash+0xa0>)
 8000596:	f000 f913 	bl	80007c0 <etx_receive_chunk>
 800059a:	4603      	mov	r3, r0
 800059c:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d007      	beq.n	80005b4 <etx_ota_download_and_flash+0x54>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005a4:	88bb      	ldrh	r3, [r7, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4815      	ldr	r0, [pc, #84]	@ (8000600 <etx_ota_download_and_flash+0xa0>)
 80005aa:	f000 f82f 	bl	800060c <etx_process_data>
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e001      	b.n	80005b8 <etx_ota_download_and_flash+0x58>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <etx_ota_download_and_flash+0x6c>
    {
      printf("Sending NACK\r\n");
 80005be:	4811      	ldr	r0, [pc, #68]	@ (8000604 <etx_ota_download_and_flash+0xa4>)
 80005c0:	f007 fefe 	bl	80083c0 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 f979 	bl	80008bc <etx_ota_send_resp>
      break;
 80005ca:	e009      	b.n	80005e0 <etx_ota_download_and_flash+0x80>
    }
    else
    {
      printf("Sending ACK\r\n");
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <etx_ota_download_and_flash+0xa8>)
 80005ce:	f007 fef7 	bl	80083c0 <puts>
      etx_ota_send_resp( ETX_OTA_ACK );
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f972 	bl	80008bc <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <etx_ota_download_and_flash+0x9c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1d3      	bne.n	8000588 <etx_ota_download_and_flash+0x28>

  return ret;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	080090bc 	.word	0x080090bc
 80005f0:	200001b0 	.word	0x200001b0
 80005f4:	200001b8 	.word	0x200001b8
 80005f8:	200001b4 	.word	0x200001b4
 80005fc:	200001af 	.word	0x200001af
 8000600:	20000174 	.word	0x20000174
 8000604:	080090dc 	.word	0x080090dc
 8000608:	080090ec 	.word	0x080090ec

0800060c <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000618:	2301      	movs	r3, #1
 800061a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	f000 80b3 	beq.w	800078c <etx_process_data+0x180>
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f000 80af 	beq.w	800078c <etx_process_data+0x180>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d104      	bne.n	8000644 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	2b02      	cmp	r3, #2
 8000640:	f000 809b 	beq.w	800077a <etx_process_data+0x16e>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 8000644:	4b54      	ldr	r3, [pc, #336]	@ (8000798 <etx_process_data+0x18c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b04      	cmp	r3, #4
 800064a:	f200 8092 	bhi.w	8000772 <etx_process_data+0x166>
 800064e:	a201      	add	r2, pc, #4	@ (adr r2, 8000654 <etx_process_data+0x48>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000669 	.word	0x08000669
 8000658:	08000677 	.word	0x08000677
 800065c:	0800069f 	.word	0x0800069f
 8000660:	080006d5 	.word	0x080006d5
 8000664:	0800074b 	.word	0x0800074b
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 8000668:	484c      	ldr	r0, [pc, #304]	@ (800079c <etx_process_data+0x190>)
 800066a:	f007 fea9 	bl	80083c0 <puts>
        ret = ETX_OTA_EX_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000674:	e08a      	b.n	800078c <etx_process_data+0x180>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d17d      	bne.n	800077e <etx_process_data+0x172>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d179      	bne.n	800077e <etx_process_data+0x172>
          {
            printf("Received OTA START Command\r\n");
 800068a:	4845      	ldr	r0, [pc, #276]	@ (80007a0 <etx_process_data+0x194>)
 800068c:	f007 fe98 	bl	80083c0 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000690:	4b41      	ldr	r3, [pc, #260]	@ (8000798 <etx_process_data+0x18c>)
 8000692:	2202      	movs	r2, #2
 8000694:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 800069c:	e06f      	b.n	800077e <etx_process_data+0x172>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d16b      	bne.n	8000782 <etx_process_data+0x176>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4a3d      	ldr	r2, [pc, #244]	@ (80007a4 <etx_process_data+0x198>)
 80006b0:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4a3c      	ldr	r2, [pc, #240]	@ (80007a8 <etx_process_data+0x19c>)
 80006b8:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 80006ba:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <etx_process_data+0x198>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	483a      	ldr	r0, [pc, #232]	@ (80007ac <etx_process_data+0x1a0>)
 80006c2:	f007 fe15 	bl	80082f0 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 80006c6:	4b34      	ldr	r3, [pc, #208]	@ (8000798 <etx_process_data+0x18c>)
 80006c8:	2203      	movs	r2, #3
 80006ca:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 80006d2:	e056      	b.n	8000782 <etx_process_data+0x176>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	789a      	ldrb	r2, [r3, #2]
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	4313      	orrs	r3, r2
 80006e2:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d14c      	bne.n	8000786 <etx_process_data+0x17a>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	1d18      	adds	r0, r3, #4
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <etx_process_data+0x1a4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	8afb      	ldrh	r3, [r7, #22]
 8000700:	4619      	mov	r1, r3
 8000702:	f000 f8fd 	bl	8000900 <write_data_to_flash_app>
 8000706:	4603      	mov	r3, r0
 8000708:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 800070a:	7d7b      	ldrb	r3, [r7, #21]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d13a      	bne.n	8000786 <etx_process_data+0x17a>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <etx_process_data+0x1a4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a27      	ldr	r2, [pc, #156]	@ (80007b4 <etx_process_data+0x1a8>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	0919      	lsrs	r1, r3, #4
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <etx_process_data+0x198>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <etx_process_data+0x1a8>)
 8000722:	fba2 2303 	umull	r2, r3, r2, r3
 8000726:	091b      	lsrs	r3, r3, #4
 8000728:	461a      	mov	r2, r3
 800072a:	4823      	ldr	r0, [pc, #140]	@ (80007b8 <etx_process_data+0x1ac>)
 800072c:	f007 fde0 	bl	80082f0 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <etx_process_data+0x1a4>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <etx_process_data+0x198>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d302      	bcc.n	8000742 <etx_process_data+0x136>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <etx_process_data+0x18c>)
 800073e:	2204      	movs	r2, #4
 8000740:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8000748:	e01d      	b.n	8000786 <etx_process_data+0x17a>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d119      	bne.n	800078a <etx_process_data+0x17e>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d115      	bne.n	800078a <etx_process_data+0x17e>
          {
            printf("Received OTA END Command\r\n");
 800075e:	4817      	ldr	r0, [pc, #92]	@ (80007bc <etx_process_data+0x1b0>)
 8000760:	f007 fe2e 	bl	80083c0 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <etx_process_data+0x18c>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8000770:	e00b      	b.n	800078a <etx_process_data+0x17e>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 8000772:	2301      	movs	r3, #1
 8000774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000778:	e008      	b.n	800078c <etx_process_data+0x180>
        break;
 800077a:	bf00      	nop
 800077c:	e006      	b.n	800078c <etx_process_data+0x180>
      break;
 800077e:	bf00      	nop
 8000780:	e004      	b.n	800078c <etx_process_data+0x180>
      break;
 8000782:	bf00      	nop
 8000784:	e002      	b.n	800078c <etx_process_data+0x180>
      break;
 8000786:	bf00      	nop
 8000788:	e000      	b.n	800078c <etx_process_data+0x180>
      break;
 800078a:	bf00      	nop
    };
  }while( false );

  return ret;
 800078c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000790:	4618      	mov	r0, r3
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001af 	.word	0x200001af
 800079c:	080090fc 	.word	0x080090fc
 80007a0:	08009114 	.word	0x08009114
 80007a4:	200001b0 	.word	0x200001b0
 80007a8:	200001b4 	.word	0x200001b4
 80007ac:	08009130 	.word	0x08009130
 80007b0:	200001b8 	.word	0x200001b8
 80007b4:	51eb851f 	.word	0x51eb851f
 80007b8:	08009158 	.word	0x08009158
 80007bc:	08009164 	.word	0x08009164

080007c0 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
  int16_t  ret = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	81fb      	strh	r3, [r7, #14]
  uint16_t index     = 0u;
 80007d0:	2300      	movs	r3, #0
 80007d2:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

    //wait for data reception
	while(flag == 0){
 80007d4:	e002      	b.n	80007dc <etx_receive_chunk+0x1c>
		HAL_Delay(1);
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 fc8a 	bl	80010f0 <HAL_Delay>
	while(flag == 0){
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <etx_receive_chunk+0xe0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f8      	beq.n	80007d6 <etx_receive_chunk+0x16>
	}
	memcpy(buf, rx_buffer, len);  // copy the data to the buffer
 80007e4:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <etx_receive_chunk+0xe4>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	492f      	ldr	r1, [pc, #188]	@ (80008a8 <etx_receive_chunk+0xe8>)
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f007 ff42 	bl	8008676 <memcpy>

	//receive SOF byte (1byte)
    if( buf[index++] != ETX_OTA_SOF )
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	81ba      	strh	r2, [r7, #12]
 80007f8:	461a      	mov	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2baa      	cmp	r3, #170	@ 0xaa
 8000802:	d004      	beq.n	800080e <etx_receive_chunk+0x4e>
    {
      //Not received start of frame
      printf("Did not get SOF \n");
 8000804:	4829      	ldr	r0, [pc, #164]	@ (80008ac <etx_receive_chunk+0xec>)
 8000806:	f007 fddb 	bl	80083c0 <puts>
      ret = ETX_OTA_EX_ERR;
 800080a:	2301      	movs	r3, #1
 800080c:	81fb      	strh	r3, [r7, #14]
    }

    index++; //increment of index for packet type
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	3301      	adds	r3, #1
 8000812:	81bb      	strh	r3, [r7, #12]
    data_len = *(uint16_t *)&buf[index];
 8000814:	89bb      	ldrh	r3, [r7, #12]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	813b      	strh	r3, [r7, #8]
    index += 2u;
 800081e:	89bb      	ldrh	r3, [r7, #12]
 8000820:	3302      	adds	r3, #2
 8000822:	81bb      	strh	r3, [r7, #12]
    printf("the data len is %d\n",data_len);
 8000824:	893b      	ldrh	r3, [r7, #8]
 8000826:	4619      	mov	r1, r3
 8000828:	4821      	ldr	r0, [pc, #132]	@ (80008b0 <etx_receive_chunk+0xf0>)
 800082a:	f007 fd61 	bl	80082f0 <iprintf>

//increment on index for data
    for( uint16_t i = 0u; i < data_len; i++ )
 800082e:	2300      	movs	r3, #0
 8000830:	817b      	strh	r3, [r7, #10]
 8000832:	e005      	b.n	8000840 <etx_receive_chunk+0x80>
    {
    	index++;
 8000834:	89bb      	ldrh	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	81bb      	strh	r3, [r7, #12]
    for( uint16_t i = 0u; i < data_len; i++ )
 800083a:	897b      	ldrh	r3, [r7, #10]
 800083c:	3301      	adds	r3, #1
 800083e:	817b      	strh	r3, [r7, #10]
 8000840:	897a      	ldrh	r2, [r7, #10]
 8000842:	893b      	ldrh	r3, [r7, #8]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3f5      	bcc.n	8000834 <etx_receive_chunk+0x74>
    }

    index += 4u; //CRC index increment
 8000848:	89bb      	ldrh	r3, [r7, #12]
 800084a:	3304      	adds	r3, #4
 800084c:	81bb      	strh	r3, [r7, #12]
//
//    //TODO: Add CRC verification
//

    if( buf[index++] != ETX_OTA_EOF )
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	81ba      	strh	r2, [r7, #12]
 8000854:	461a      	mov	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2bbb      	cmp	r3, #187	@ 0xbb
 800085e:	d004      	beq.n	800086a <etx_receive_chunk+0xaa>
    {
      //Not received end of frame
    	printf("Did not get EOF \n");
 8000860:	4814      	ldr	r0, [pc, #80]	@ (80008b4 <etx_receive_chunk+0xf4>)
 8000862:	f007 fdad 	bl	80083c0 <puts>
      ret = ETX_OTA_EX_ERR;
 8000866:	2301      	movs	r3, #1
 8000868:	81fb      	strh	r3, [r7, #14]
    }

  if( ret != HAL_OK )
 800086a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <etx_receive_chunk+0xb6>
  {
    //clear the index if error
    index = 0u;
 8000872:	2300      	movs	r3, #0
 8000874:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000876:	887a      	ldrh	r2, [r7, #2]
 8000878:	89bb      	ldrh	r3, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	d207      	bcs.n	800088e <etx_receive_chunk+0xce>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	89ba      	ldrh	r2, [r7, #12]
 8000882:	4619      	mov	r1, r3
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <etx_receive_chunk+0xf8>)
 8000886:	f007 fd33 	bl	80082f0 <iprintf>
                                                              max_len, index );
    index = 0u;
 800088a:	2300      	movs	r3, #0
 800088c:	81bb      	strh	r3, [r7, #12]
  }

  flag = 0;
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <etx_receive_chunk+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
  return index;
 8000894:	89bb      	ldrh	r3, [r7, #12]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200005d8 	.word	0x200005d8
 80008a4:	200005dc 	.word	0x200005dc
 80008a8:	200001bc 	.word	0x200001bc
 80008ac:	08009180 	.word	0x08009180
 80008b0:	08009194 	.word	0x08009194
 80008b4:	080091a8 	.word	0x080091a8
 80008b8:	080091bc 	.word	0x080091bc

080008bc <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 80008c6:	23aa      	movs	r3, #170	@ 0xaa
 80008c8:	733b      	strb	r3, [r7, #12]
 80008ca:	2303      	movs	r3, #3
 80008cc:	737b      	strb	r3, [r7, #13]
 80008ce:	2301      	movs	r3, #1
 80008d0:	81fb      	strh	r3, [r7, #14]
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	743b      	strb	r3, [r7, #16]
 80008d6:	2300      	movs	r3, #0
 80008d8:	747b      	strb	r3, [r7, #17]
 80008da:	2300      	movs	r3, #0
 80008dc:	74bb      	strb	r3, [r7, #18]
 80008de:	2300      	movs	r3, #0
 80008e0:	74fb      	strb	r3, [r7, #19]
 80008e2:	2300      	movs	r3, #0
 80008e4:	753b      	strb	r3, [r7, #20]
 80008e6:	23bb      	movs	r3, #187	@ 0xbb
 80008e8:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  CDC_Transmit_FS((uint8_t *)&rsp, sizeof(ETX_OTA_RESP_));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	210a      	movs	r1, #10
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 ff89 	bl	8007808 <CDC_Transmit_FS>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
 800090c:	4613      	mov	r3, r2
 800090e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000910:	f000 fdc4 	bl	800149c <HAL_FLASH_Unlock>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 800091a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800091e:	2b00      	cmp	r3, #0
 8000920:	d157      	bne.n	80009d2 <write_data_to_flash_app+0xd2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000922:	787b      	ldrb	r3, [r7, #1]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d019      	beq.n	800095c <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 8000928:	482f      	ldr	r0, [pc, #188]	@ (80009e8 <write_data_to_flash_app+0xe8>)
 800092a:	f007 fd49 	bl	80083c0 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_6;
 8000932:	2306      	movs	r3, #6
 8000934:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800093a:	2302      	movs	r3, #2
 800093c:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 800093e:	f107 0208 	add.w	r2, r7, #8
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f000 ff09 	bl	8001760 <HAL_FLASHEx_Erase>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 8000954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000958:	2b00      	cmp	r3, #0
 800095a:	d13c      	bne.n	80009d6 <write_data_to_flash_app+0xd6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	e026      	b.n	80009b0 <write_data_to_flash_app+0xb0>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000962:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <write_data_to_flash_app+0xec>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800096a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[i]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2200      	movs	r2, #0
 800097a:	461c      	mov	r4, r3
 800097c:	4615      	mov	r5, r2
 800097e:	4622      	mov	r2, r4
 8000980:	462b      	mov	r3, r5
 8000982:	2000      	movs	r0, #0
 8000984:	f000 fd36 	bl	80013f4 <HAL_FLASH_Program>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                             );
      if( ret == HAL_OK )
 800098e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000992:	2b00      	cmp	r3, #0
 8000994:	d105      	bne.n	80009a2 <write_data_to_flash_app+0xa2>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <write_data_to_flash_app+0xec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	4a13      	ldr	r2, [pc, #76]	@ (80009ec <write_data_to_flash_app+0xec>)
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e003      	b.n	80009aa <write_data_to_flash_app+0xaa>
      }
      else
      {
        printf("Flash Write Error\r\n");
 80009a2:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <write_data_to_flash_app+0xf0>)
 80009a4:	f007 fd0c 	bl	80083c0 <puts>
        break;
 80009a8:	e006      	b.n	80009b8 <write_data_to_flash_app+0xb8>
    for(int i = 0; i < data_len; i++ )
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	3301      	adds	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	6a3a      	ldr	r2, [r7, #32]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbd4      	blt.n	8000962 <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 80009b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10c      	bne.n	80009da <write_data_to_flash_app+0xda>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 80009c0:	f000 fd8e 	bl	80014e0 <HAL_FLASH_Lock>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	e004      	b.n	80009dc <write_data_to_flash_app+0xdc>
      break;
 80009d2:	bf00      	nop
 80009d4:	e002      	b.n	80009dc <write_data_to_flash_app+0xdc>
        break;
 80009d6:	bf00      	nop
 80009d8:	e000      	b.n	80009dc <write_data_to_flash_app+0xdc>
      break;
 80009da:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 80009dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bdb0      	pop	{r4, r5, r7, pc}
 80009e8:	08009200 	.word	0x08009200
 80009ec:	200001b8 	.word	0x200001b8
 80009f0:	08009220 	.word	0x08009220

080009f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d013      	beq.n	8000a34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a0c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00b      	beq.n	8000a34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a1c:	e000      	b.n	8000a20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a2a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffc7 	bl	80009f4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x16>
  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 fa8b 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f865 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f8cb 	bl	8000c28 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a92:	f006 fdd9 	bl	8007648 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("Lets see this from bootloader\n");
 8000a96:	4828      	ldr	r0, [pc, #160]	@ (8000b38 <main+0xb8>)
 8000a98:	f007 fc92 	bl	80083c0 <puts>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa2:	4826      	ldr	r0, [pc, #152]	@ (8000b3c <main+0xbc>)
 8000aa4:	f001 fa2e 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000aa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000aac:	f000 fb20 	bl	80010f0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab6:	4821      	ldr	r0, [pc, #132]	@ (8000b3c <main+0xbc>)
 8000ab8:	f001 fa24 	bl	8001f04 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000abc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ac0:	f000 fb16 	bl	80010f0 <HAL_Delay>

  /* Check the GPIO for 3 seconds */
    GPIO_PinState OTA_Pin_state;
    uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000ac4:	f000 fb08 	bl	80010d8 <HAL_GetTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8000ace:	60fb      	str	r3, [r7, #12]

    printf("Press the User Button PA0 to trigger OTA update...\r\n");
 8000ad0:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <main+0xc0>)
 8000ad2:	f007 fc75 	bl	80083c0 <puts>
    do
    {
      OTA_Pin_state = HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_0 );
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	481a      	ldr	r0, [pc, #104]	@ (8000b44 <main+0xc4>)
 8000ada:	f001 f9fb 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	72fb      	strb	r3, [r7, #11]
      uint32_t current_tick = HAL_GetTick();
 8000ae2:	f000 faf9 	bl	80010d8 <HAL_GetTick>
 8000ae6:	6078      	str	r0, [r7, #4]

      /* Check the button is pressed or not for 3seconds */
      if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d104      	bne.n	8000af8 <main+0x78>
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d800      	bhi.n	8000af8 <main+0x78>
    {
 8000af6:	e7ee      	b.n	8000ad6 <main+0x56>
      }
    }while( 1 );


    /*Start the Firmware or Application update */
     if( OTA_Pin_state == GPIO_PIN_SET )
 8000af8:	7afb      	ldrb	r3, [r7, #11]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d111      	bne.n	8000b22 <main+0xa2>
     {
       printf("Starting Firmware Download!!!\r\n");
 8000afe:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <main+0xc8>)
 8000b00:	f007 fc5e 	bl	80083c0 <puts>
       /* OTA Request. Receive the data from the UART4 and flash */
       if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000b04:	f7ff fd2c 	bl	8000560 <etx_ota_download_and_flash>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <main+0x98>
       {
         /* Error. Don't process. */
         printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <main+0xcc>)
 8000b10:	f007 fc56 	bl	80083c0 <puts>
         while( 1 );
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <main+0x94>
       }
       else
       {
         /* Reset to load the new application */
         printf("Firmware update is done!!! Rebooting...\r\n");
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <main+0xd0>)
 8000b1a:	f007 fc51 	bl	80083c0 <puts>
         HAL_NVIC_SystemReset();
 8000b1e:	f000 fc58 	bl	80013d2 <HAL_NVIC_SystemReset>
       }
     }

  goto_application();
 8000b22:	f000 f8e1 	bl	8000ce8 <goto_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <main+0xd4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d1fb      	bne.n	8000b26 <main+0xa6>
	   //printf("%s\n",rx_buffer);
	   flag = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <main+0xd4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
	  if(flag == 1){
 8000b34:	e7f7      	b.n	8000b26 <main+0xa6>
 8000b36:	bf00      	nop
 8000b38:	08009234 	.word	0x08009234
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	08009254 	.word	0x08009254
 8000b44:	40020000 	.word	0x40020000
 8000b48:	08009288 	.word	0x08009288
 8000b4c:	080092a8 	.word	0x080092a8
 8000b50:	080092c8 	.word	0x080092c8
 8000b54:	200005d8 	.word	0x200005d8

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	@ 0x50
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2230      	movs	r2, #48	@ 0x30
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 fd0a 	bl	8008580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <SystemClock_Config+0xc8>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	4a26      	ldr	r2, [pc, #152]	@ (8000c20 <SystemClock_Config+0xc8>)
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <SystemClock_Config+0xc8>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <SystemClock_Config+0xcc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <SystemClock_Config+0xcc>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <SystemClock_Config+0xcc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bcc:	2348      	movs	r3, #72	@ 0x48
 8000bce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fc5b 	bl	8003498 <HAL_RCC_OscConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000be8:	f000 f8ae 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2102      	movs	r1, #2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 febd 	bl	8003988 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c14:	f000 f898 	bl	8000d48 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3750      	adds	r7, #80	@ 0x50
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40007000 	.word	0x40007000

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a25      	ldr	r2, [pc, #148]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_GPIO_Init+0xb4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c98:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <MX_GPIO_Init+0xb8>)
 8000c9a:	f001 f933 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_GPIO_Init+0xbc>)
 8000cb2:	f000 fe77 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <MX_GPIO_Init+0xb8>)
 8000cd0:	f000 fe68 	bl	80019a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	void (*myapp)(void) = (void*) (*(volatile uint32_t*)(0x08040000 + 4));
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <goto_application+0x4c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	607b      	str	r3, [r7, #4]
	printf("Jumping to application\n");
 8000cf4:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <goto_application+0x50>)
 8000cf6:	f007 fb63 	bl	80083c0 <puts>

	/* Reset the Clock */
  USBD_DeInit(&hUsbDeviceFS); //Deinit the usb as it is no more needed
 8000cfa:	4810      	ldr	r0, [pc, #64]	@ (8000d3c <goto_application+0x54>)
 8000cfc:	f005 f9a2 	bl	8006044 <USBD_DeInit>
  HAL_RCC_DeInit();
 8000d00:	f003 f83a 	bl	8003d78 <HAL_RCC_DeInit>
  HAL_DeInit();
 8000d04:	f000 f96e 	bl	8000fe4 <HAL_DeInit>
  __set_MSP(*(volatile uint32_t*) 0x08040000);
 8000d08:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <goto_application+0x58>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f383 8808 	msr	MSP, r3
}
 8000d14:	bf00      	nop
  SysTick->CTRL = 0;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <goto_application+0x5c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <goto_application+0x5c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <goto_application+0x5c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
	myapp();
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4798      	blx	r3
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08040004 	.word	0x08040004
 8000d38:	080092f4 	.word	0x080092f4
 8000d3c:	2000060c 	.word	0x2000060c
 8000d40:	08040000 	.word	0x08040000
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d92:	2007      	movs	r0, #7
 8000d94:	f000 fada 	bl	800134c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f959 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <OTG_FS_IRQHandler+0x10>)
 8000e0a:	f001 fa36 	bl	800227a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20001ae8 	.word	0x20001ae8

08000e18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
  }

  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f007 fb96 	bl	800861c <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	200005e0 	.word	0x200005e0
 8000f24:	20002338 	.word	0x20002338

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f007 fb55 	bl	8008628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fd7f 	bl	8000a80 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f90:	080093a8 	.word	0x080093a8
  ldr r2, =_sbss
 8000f94:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f98:	20002338 	.word	0x20002338

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f9bf 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f83e 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff febe 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_DeInit+0x4c>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <HAL_DeInit+0x50>)
 8000fec:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_DeInit+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_DeInit+0x4c>)
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <HAL_DeInit+0x54>)
 8000ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <HAL_DeInit+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_DeInit+0x4c>)
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <HAL_DeInit+0x58>)
 8001004:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_DeInit+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_DeInit+0x4c>)
 800100e:	22c1      	movs	r2, #193	@ 0xc1
 8001010:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_DeInit+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_DeInit+0x4c>)
 800101a:	2201      	movs	r2, #1
 800101c:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <HAL_DeInit+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001024:	f000 f80c 	bl	8001040 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	f6fec9ff 	.word	0xf6fec9ff
 8001038:	04777933 	.word	0x04777933
 800103c:	226011ff 	.word	0x226011ff

08001040 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f9b3 	bl	80013da <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f969 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	@ (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	200005e4 	.word	0x200005e4

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200005e4 	.word	0x200005e4

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	@ (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_DisableIRQ>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db12      	blt.n	8001210 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	490a      	ldr	r1, [pc, #40]	@ (800121c <__NVIC_DisableIRQ+0x44>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	3320      	adds	r3, #32
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001204:	f3bf 8f4f 	dsb	sy
}
 8001208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800120a:	f3bf 8f6f 	isb	sy
}
 800120e:	bf00      	nop
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <__NVIC_SystemReset>:
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80012e0:	f3bf 8f4f 	dsb	sy
}
 80012e4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <__NVIC_SystemReset+0x24>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012ee:	4904      	ldr	r1, [pc, #16]	@ (8001300 <__NVIC_SystemReset+0x24>)
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_SystemReset+0x28>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012f6:	f3bf 8f4f 	dsb	sy
}
 80012fa:	bf00      	nop
    __NOP();
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <__NVIC_SystemReset+0x20>
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	05fa0004 	.word	0x05fa0004

08001308 <SysTick_Config>:
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff78 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff feef 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff04 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff78 	bl	8001274 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff47 	bl	8001220 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fef7 	bl	800119c <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff07 	bl	80011d8 <__NVIC_DisableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80013d6:	f7ff ff81 	bl	80012dc <__NVIC_SystemReset>

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff90 	bl	8001308 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_FLASH_Program+0xa0>)
 8001408:	7e1b      	ldrb	r3, [r3, #24]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_FLASH_Program+0x1e>
 800140e:	2302      	movs	r3, #2
 8001410:	e03b      	b.n	800148a <HAL_FLASH_Program+0x96>
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_FLASH_Program+0xa0>)
 8001414:	2201      	movs	r2, #1
 8001416:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001418:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800141c:	f000 f870 	bl	8001500 <FLASH_WaitForLastOperation>
 8001420:	4603      	mov	r3, r0
 8001422:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d12b      	bne.n	8001482 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001430:	783b      	ldrb	r3, [r7, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f000 f91b 	bl	8001670 <FLASH_Program_Byte>
 800143a:	e016      	b.n	800146a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d105      	bne.n	800144e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f000 f8ee 	bl	8001628 <FLASH_Program_HalfWord>
 800144c:	e00d      	b.n	800146a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d105      	bne.n	8001460 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f000 f8c3 	bl	80015e4 <FLASH_Program_Word>
 800145e:	e004      	b.n	800146a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f000 f88b 	bl	8001580 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800146a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800146e:	f000 f847 	bl	8001500 <FLASH_WaitForLastOperation>
 8001472:	4603      	mov	r3, r0
 8001474:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_FLASH_Program+0xa4>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <HAL_FLASH_Program+0xa4>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <HAL_FLASH_Program+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	761a      	strb	r2, [r3, #24]

  return status;
 8001488:	7dfb      	ldrb	r3, [r7, #23]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200005e8 	.word	0x200005e8
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_FLASH_Unlock+0x38>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da0b      	bge.n	80014c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_FLASH_Unlock+0x38>)
 80014b0:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <HAL_FLASH_Unlock+0x3c>)
 80014b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <HAL_FLASH_Unlock+0x38>)
 80014b6:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <HAL_FLASH_Unlock+0x40>)
 80014b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_FLASH_Unlock+0x38>)
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da01      	bge.n	80014c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40023c00 	.word	0x40023c00
 80014d8:	45670123 	.word	0x45670123
 80014dc:	cdef89ab 	.word	0xcdef89ab

080014e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_FLASH_Lock+0x1c>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_FLASH_Lock+0x1c>)
 80014ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014ee:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40023c00 	.word	0x40023c00

08001500 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <FLASH_WaitForLastOperation+0x78>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001512:	f7ff fde1 	bl	80010d8 <HAL_GetTick>
 8001516:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001518:	e010      	b.n	800153c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d00c      	beq.n	800153c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <FLASH_WaitForLastOperation+0x38>
 8001528:	f7ff fdd6 	bl	80010d8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d201      	bcs.n	800153c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e019      	b.n	8001570 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800153c:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <FLASH_WaitForLastOperation+0x7c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e8      	bne.n	800151a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <FLASH_WaitForLastOperation+0x7c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <FLASH_WaitForLastOperation+0x7c>)
 8001556:	2201      	movs	r2, #1
 8001558:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800155a:	4b08      	ldr	r3, [pc, #32]	@ (800157c <FLASH_WaitForLastOperation+0x7c>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001566:	f000 f8a5 	bl	80016b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0

}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200005e8 	.word	0x200005e8
 800157c:	40023c00 	.word	0x40023c00

08001580 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <FLASH_Program_DoubleWord+0x60>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <FLASH_Program_DoubleWord+0x60>)
 8001592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <FLASH_Program_DoubleWord+0x60>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <FLASH_Program_DoubleWord+0x60>)
 800159e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80015a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <FLASH_Program_DoubleWord+0x60>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <FLASH_Program_DoubleWord+0x60>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80015b6:	f3bf 8f6f 	isb	sy
}
 80015ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80015bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	000a      	movs	r2, r1
 80015ca:	2300      	movs	r3, #0
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	3104      	adds	r1, #4
 80015d0:	4613      	mov	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <FLASH_Program_Word+0x40>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001624 <FLASH_Program_Word+0x40>)
 80015f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <FLASH_Program_Word+0x40>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <FLASH_Program_Word+0x40>)
 8001600:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001604:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <FLASH_Program_Word+0x40>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <FLASH_Program_Word+0x40>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40023c00 	.word	0x40023c00

08001628 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <FLASH_Program_HalfWord+0x44>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <FLASH_Program_HalfWord+0x44>)
 800163a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800163e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <FLASH_Program_HalfWord+0x44>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a09      	ldr	r2, [pc, #36]	@ (800166c <FLASH_Program_HalfWord+0x44>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <FLASH_Program_HalfWord+0x44>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	4a06      	ldr	r2, [pc, #24]	@ (800166c <FLASH_Program_HalfWord+0x44>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	801a      	strh	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00

08001670 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <FLASH_Program_Byte+0x40>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <FLASH_Program_Byte+0x40>)
 8001682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001686:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <FLASH_Program_Byte+0x40>)
 800168a:	4a09      	ldr	r2, [pc, #36]	@ (80016b0 <FLASH_Program_Byte+0x40>)
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <FLASH_Program_Byte+0x40>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4a06      	ldr	r2, [pc, #24]	@ (80016b0 <FLASH_Program_Byte+0x40>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	701a      	strb	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80016b8:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016c4:	4b25      	ldr	r3, [pc, #148]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	4a23      	ldr	r2, [pc, #140]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 80016ce:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80016d0:	4b21      	ldr	r3, [pc, #132]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 80016d2:	2210      	movs	r2, #16
 80016d4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 80016ec:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 80016f0:	2220      	movs	r2, #32
 80016f2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001700:	4b16      	ldr	r3, [pc, #88]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	4a14      	ldr	r2, [pc, #80]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 800170a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 800170e:	2240      	movs	r2, #64	@ 0x40
 8001710:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 8001728:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800173c:	4b07      	ldr	r3, [pc, #28]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	4a05      	ldr	r2, [pc, #20]	@ (800175c <FLASH_SetErrorCode+0xa8>)
 8001746:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <FLASH_SetErrorCode+0xa4>)
 800174a:	2202      	movs	r2, #2
 800174c:	60da      	str	r2, [r3, #12]
  }
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40023c00 	.word	0x40023c00
 800175c:	200005e8 	.word	0x200005e8

08001760 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001772:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <HAL_FLASHEx_Erase+0xd8>)
 8001774:	7e1b      	ldrb	r3, [r3, #24]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_FLASHEx_Erase+0x1e>
 800177a:	2302      	movs	r3, #2
 800177c:	e058      	b.n	8001830 <HAL_FLASHEx_Erase+0xd0>
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <HAL_FLASHEx_Erase+0xd8>)
 8001780:	2201      	movs	r2, #1
 8001782:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001784:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001788:	f7ff feba 	bl	8001500 <FLASH_WaitForLastOperation>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d148      	bne.n	8001828 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d115      	bne.n	80017d2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4610      	mov	r0, r2
 80017b4:	f000 f844 	bl	8001840 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017bc:	f7ff fea0 	bl	8001500 <FLASH_WaitForLastOperation>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017c4:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_FLASHEx_Erase+0xdc>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <HAL_FLASHEx_Erase+0xdc>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6113      	str	r3, [r2, #16]
 80017d0:	e028      	b.n	8001824 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	e01c      	b.n	8001814 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	68b8      	ldr	r0, [r7, #8]
 80017e4:	f000 f850 	bl	8001888 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017ec:	f7ff fe88 	bl	8001500 <FLASH_WaitForLastOperation>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_FLASHEx_Erase+0xdc>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a10      	ldr	r2, [pc, #64]	@ (800183c <HAL_FLASHEx_Erase+0xdc>)
 80017fa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80017fe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	601a      	str	r2, [r3, #0]
          break;
 800180c:	e00a      	b.n	8001824 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4413      	add	r3, r2
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	429a      	cmp	r2, r3
 8001822:	d3da      	bcc.n	80017da <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001824:	f000 f878 	bl	8001918 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_FLASHEx_Erase+0xd8>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]

  return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200005e8 	.word	0x200005e8
 800183c:	40023c00 	.word	0x40023c00

08001840 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <FLASH_MassErase+0x44>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a0c      	ldr	r2, [pc, #48]	@ (8001884 <FLASH_MassErase+0x44>)
 8001852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001858:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <FLASH_MassErase+0x44>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <FLASH_MassErase+0x44>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <FLASH_MassErase+0x44>)
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	4313      	orrs	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <FLASH_MassErase+0x44>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001874:	6113      	str	r3, [r2, #16]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e010      	b.n	80018c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d103      	bne.n	80018b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e009      	b.n	80018c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d103      	bne.n	80018c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e002      	b.n	80018c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	490f      	ldr	r1, [pc, #60]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80018de:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80018e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <FLASH_Erase_Sector+0x8c>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001906:	6113      	str	r3, [r2, #16]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40023c00 	.word	0x40023c00

08001918 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001924:	2b00      	cmp	r3, #0
 8001926:	d017      	beq.n	8001958 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800192e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001932:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001934:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800193a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001946:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800194a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d017      	beq.n	8001994 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800196a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800196e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001976:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 8001982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001986:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <FLASH_FlushCaches+0x88>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001992:	6013      	str	r3, [r2, #0]
  }
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e16b      	b.n	8001c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 815a 	bne.w	8001c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d005      	beq.n	80019f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d130      	bne.n	8001a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 0201 	and.w	r2, r3, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d017      	beq.n	8001a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80b4 	beq.w	8001c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b60      	ldr	r3, [pc, #384]	@ (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a5f      	ldr	r2, [pc, #380]	@ (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb0 <HAL_GPIO_Init+0x30c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b46:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb4 <HAL_GPIO_Init+0x310>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	@ (8001cb8 <HAL_GPIO_Init+0x314>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d02b      	beq.n	8001bca <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a51      	ldr	r2, [pc, #324]	@ (8001cbc <HAL_GPIO_Init+0x318>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	@ (8001cc0 <HAL_GPIO_Init+0x31c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc4 <HAL_GPIO_Init+0x320>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x21a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cc8 <HAL_GPIO_Init+0x324>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x216>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	@ (8001ccc <HAL_GPIO_Init+0x328>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x212>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_GPIO_Init+0x32c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd4 <HAL_GPIO_Init+0x330>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x20a>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e00e      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bae:	2308      	movs	r3, #8
 8001bb0:	e00c      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	e00a      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bba:	2304      	movs	r3, #4
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x228>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	@ (8001cb4 <HAL_GPIO_Init+0x310>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0e:	4a32      	ldr	r2, [pc, #200]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c14:	4b30      	ldr	r3, [pc, #192]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c38:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c62:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8c:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <HAL_GPIO_Init+0x334>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f ae90 	bls.w	80019c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e0cd      	b.n	8001e94 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	f040 80bd 	bne.w	8001e8e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d14:	4a65      	ldr	r2, [pc, #404]	@ (8001eac <HAL_GPIO_DeInit+0x1d0>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	4013      	ands	r3, r2
 8001d34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb0 <HAL_GPIO_DeInit+0x1d4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d02b      	beq.n	8001d96 <HAL_GPIO_DeInit+0xba>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb4 <HAL_GPIO_DeInit+0x1d8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_DeInit+0xb6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb8 <HAL_GPIO_DeInit+0x1dc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_DeInit+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a5a      	ldr	r2, [pc, #360]	@ (8001ebc <HAL_GPIO_DeInit+0x1e0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_DeInit+0xae>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a59      	ldr	r2, [pc, #356]	@ (8001ec0 <HAL_GPIO_DeInit+0x1e4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_DeInit+0xaa>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a58      	ldr	r2, [pc, #352]	@ (8001ec4 <HAL_GPIO_DeInit+0x1e8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_DeInit+0xa6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a57      	ldr	r2, [pc, #348]	@ (8001ec8 <HAL_GPIO_DeInit+0x1ec>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_DeInit+0xa2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <HAL_GPIO_DeInit+0x1f0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_DeInit+0x9e>
 8001d76:	2307      	movs	r3, #7
 8001d78:	e00e      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_DeInit+0xbc>
 8001d96:	2300      	movs	r3, #0
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d132      	bne.n	8001e0e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001da8:	4b49      	ldr	r3, [pc, #292]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	4947      	ldr	r1, [pc, #284]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001db6:	4b46      	ldr	r3, [pc, #280]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4944      	ldr	r1, [pc, #272]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001dc4:	4b42      	ldr	r3, [pc, #264]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4940      	ldr	r1, [pc, #256]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	493d      	ldr	r1, [pc, #244]	@ (8001ed0 <HAL_GPIO_DeInit+0x1f4>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001df0:	4a2e      	ldr	r2, [pc, #184]	@ (8001eac <HAL_GPIO_DeInit+0x1d0>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	482a      	ldr	r0, [pc, #168]	@ (8001eac <HAL_GPIO_DeInit+0x1d0>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	400a      	ands	r2, r1
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2103      	movs	r1, #3
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	401a      	ands	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	08d2      	lsrs	r2, r2, #3
 8001e44:	4019      	ands	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2103      	movs	r1, #3
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2103      	movs	r1, #3
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f67f af2e 	bls.w	8001cf8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40021c00 	.word	0x40021c00
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e001      	b.n	8001ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af02      	add	r7, sp, #8
 8001f3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e101      	b.n	800214c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f005 fd98 	bl	8007a98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f76:	d102      	bne.n	8001f7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 f8dd 	bl	8004142 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7c1a      	ldrb	r2, [r3, #16]
 8001f90:	f88d 2000 	strb.w	r2, [sp]
 8001f94:	3304      	adds	r3, #4
 8001f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f98:	f001 ffbc 	bl	8003f14 <USB_CoreInit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0ce      	b.n	800214c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 f8d5 	bl	8004164 <USB_SetCurrentMode>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0bf      	b.n	800214c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e04a      	b.n	8002068 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3315      	adds	r3, #21
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b298      	uxth	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	332e      	adds	r3, #46	@ 0x2e
 800200e:	4602      	mov	r2, r0
 8002010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3318      	adds	r3, #24
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331c      	adds	r3, #28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3320      	adds	r3, #32
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3324      	adds	r3, #36	@ 0x24
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3af      	bcc.n	8001fd2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e044      	b.n	8002102 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3b5      	bcc.n	8002078 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	f88d 2000 	strb.w	r2, [sp]
 8002118:	3304      	adds	r3, #4
 800211a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211c:	f002 f86e 	bl	80041fc <USB_DevInit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00c      	b.n	800214c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 f907 	bl	8005358 <USB_DevDisconnect>

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e015      	b.n	8002192 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2203      	movs	r2, #3
 800216a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 f85a 	bl	800522c <USB_StopDevice>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e007      	b.n	8002192 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f005 fcdc 	bl	8007b40 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_PCD_Start+0x1c>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e022      	b.n	80021fc <HAL_PCD_Start+0x62>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 ff9c 	bl	8004120 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 f892 	bl	8005316 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_PCD_Stop+0x1c>
 800221c:	2302      	movs	r3, #2
 800221e:	e028      	b.n	8002272 <HAL_PCD_Stop+0x6e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 ff88 	bl	8004142 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 f88e 	bl	8005358 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2110      	movs	r1, #16
 8002242:	4618      	mov	r0, r3
 8002244:	f002 f93e 	bl	80044c4 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800227a:	b590      	push	{r4, r7, lr}
 800227c:	b08d      	sub	sp, #52	@ 0x34
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f003 f915 	bl	80054c0 <USB_GetMode>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 848c 	bne.w	8002bb6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f879 	bl	800539a <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8482 	beq.w	8002bb4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f866 	bl	800539a <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d107      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f002 0202 	and.w	r2, r2, #2
 80022e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f854 	bl	800539a <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d161      	bne.n	80023c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0210 	bic.w	r2, r2, #16
 800230a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 020f 	and.w	r2, r3, #15
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	0c5b      	lsrs	r3, r3, #17
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	2b02      	cmp	r3, #2
 8002336:	d124      	bne.n	8002382 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d035      	beq.n	80023b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800234e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	6a38      	ldr	r0, [r7, #32]
 8002358:	f002 fe3c 	bl	8004fd4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002368:	441a      	add	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800237a:	441a      	add	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	615a      	str	r2, [r3, #20]
 8002380:	e016      	b.n	80023b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	0c5b      	lsrs	r3, r3, #17
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	2b06      	cmp	r3, #6
 800238c:	d110      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002394:	2208      	movs	r2, #8
 8002396:	4619      	mov	r1, r3
 8002398:	6a38      	ldr	r0, [r7, #32]
 800239a:	f002 fe1b 	bl	8004fd4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023aa:	441a      	add	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0210 	orr.w	r2, r2, #16
 80023be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 ffe8 	bl	800539a <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023d4:	f040 80a7 	bne.w	8002526 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 ffed 	bl	80053c0 <USB_ReadDevAllOutEpInterrupt>
 80023e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80023e8:	e099      	b.n	800251e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 808e 	beq.w	8002512 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f003 f811 	bl	8005428 <USB_ReadDevOutEPInterrupt>
 8002406:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00c      	beq.n	800242c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	4413      	add	r3, r2
 800241a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800241e:	461a      	mov	r2, r3
 8002420:	2301      	movs	r3, #1
 8002422:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fea4 	bl	8003174 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00c      	beq.n	8002450 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002442:	461a      	mov	r2, r3
 8002444:	2308      	movs	r3, #8
 8002446:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002448:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 ff7a 	bl	8003344 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002466:	461a      	mov	r2, r3
 8002468:	2310      	movs	r3, #16
 800246a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d030      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247e:	2b80      	cmp	r3, #128	@ 0x80
 8002480:	d109      	bne.n	8002496 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002490:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002494:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	78db      	ldrb	r3, [r3, #3]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2200      	movs	r2, #0
 80024b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f005 fc0f 	bl	8007ce4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d2:	461a      	mov	r2, r3
 80024d4:	2302      	movs	r3, #2
 80024d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ee:	461a      	mov	r2, r3
 80024f0:	2320      	movs	r3, #32
 80024f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250a:	461a      	mov	r2, r3
 800250c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002510:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f af62 	bne.w	80023ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f002 ff35 	bl	800539a <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002536:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800253a:	f040 80db 	bne.w	80026f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f002 ff56 	bl	80053f4 <USB_ReadDevAllInEpInterrupt>
 8002548:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800254e:	e0cd      	b.n	80026ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80c2 	beq.w	80026e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f002 ff7c 	bl	8005464 <USB_ReadDevInEPInterrupt>
 800256c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d057      	beq.n	8002628 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2201      	movs	r2, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800258c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	69f9      	ldr	r1, [r7, #28]
 8002594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002598:	4013      	ands	r3, r2
 800259a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a8:	461a      	mov	r2, r3
 80025aa:	2301      	movs	r3, #1
 80025ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	799b      	ldrb	r3, [r3, #6]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d132      	bne.n	800261c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3320      	adds	r3, #32
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4403      	add	r3, r0
 80025d6:	331c      	adds	r3, #28
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4419      	add	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4403      	add	r3, r0
 80025ea:	3320      	adds	r3, #32
 80025ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d113      	bne.n	800261c <HAL_PCD_IRQHandler+0x3a2>
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3324      	adds	r3, #36	@ 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002614:	461a      	mov	r2, r3
 8002616:	2101      	movs	r1, #1
 8002618:	f002 ff84 	bl	8005524 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f005 fad9 	bl	8007bda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800263e:	461a      	mov	r2, r3
 8002640:	2308      	movs	r3, #8
 8002642:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800265a:	461a      	mov	r2, r3
 800265c:	2310      	movs	r3, #16
 800265e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002676:	461a      	mov	r2, r3
 8002678:	2340      	movs	r3, #64	@ 0x40
 800267a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d023      	beq.n	80026ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002686:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002688:	6a38      	ldr	r0, [r7, #32]
 800268a:	f001 ff1b 	bl	80044c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800268e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	3310      	adds	r3, #16
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d108      	bne.n	80026bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f005 fb26 	bl	8007d08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026c8:	461a      	mov	r2, r3
 80026ca:	2302      	movs	r3, #2
 80026cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fcbd 	bl	800305a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	3301      	adds	r3, #1
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80026e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80026ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f47f af2e 	bne.w	8002550 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fe4e 	bl	800539a <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002708:	d122      	bne.n	8002750 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002730:	2100      	movs	r1, #0
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fea4 	bl	8003480 <HAL_PCDEx_LPM_Callback>
 8002738:	e002      	b.n	8002740 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f005 fac4 	bl	8007cc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800274e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fe20 	bl	800539a <USB_ReadInterrupts>
 800275a:	4603      	mov	r3, r0
 800275c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002764:	d112      	bne.n	800278c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f005 fa80 	bl	8007c7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800278a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fe02 	bl	800539a <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a0:	f040 80b7 	bne.w	8002912 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2110      	movs	r1, #16
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fe80 	bl	80044c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c8:	e046      	b.n	8002858 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027d6:	461a      	mov	r2, r3
 80027d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ee:	0151      	lsls	r1, r2, #5
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	440a      	add	r2, r1
 80027f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80027f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280a:	461a      	mov	r2, r3
 800280c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002810:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002822:	0151      	lsls	r1, r2, #5
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	440a      	add	r2, r1
 8002828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800282c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002830:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	440a      	add	r2, r1
 8002848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800284c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002850:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	3301      	adds	r3, #1
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	791b      	ldrb	r3, [r3, #4]
 800285c:	461a      	mov	r2, r3
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	4293      	cmp	r3, r2
 8002862:	d3b2      	bcc.n	80027ca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002872:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002876:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7bdb      	ldrb	r3, [r3, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d016      	beq.n	80028ae <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002890:	f043 030b 	orr.w	r3, r3, #11
 8002894:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028a6:	f043 030b 	orr.w	r3, r3, #11
 80028aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ac:	e015      	b.n	80028da <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028c0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028d4:	f043 030b 	orr.w	r3, r3, #11
 80028d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028fc:	461a      	mov	r2, r3
 80028fe:	f002 fe11 	bl	8005524 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f002 fd3f 	bl	800539a <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002926:	d123      	bne.n	8002970 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fdd5 	bl	80054dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f001 fe3d 	bl	80045b6 <USB_GetDevSpeed>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681c      	ldr	r4, [r3, #0]
 8002948:	f001 fa0a 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 800294c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002952:	461a      	mov	r2, r3
 8002954:	4620      	mov	r0, r4
 8002956:	f001 fb41 	bl	8003fdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f005 f965 	bl	8007c2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800296e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f002 fd10 	bl	800539a <USB_ReadInterrupts>
 800297a:	4603      	mov	r3, r0
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b08      	cmp	r3, #8
 8002982:	d10a      	bne.n	800299a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f005 f942 	bl	8007c0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 0208 	and.w	r2, r2, #8
 8002998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fcfb 	bl	800539a <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b80      	cmp	r3, #128	@ 0x80
 80029ac:	d123      	bne.n	80029f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ba:	2301      	movs	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	e014      	b.n	80029ea <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fb0a 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	3301      	adds	r3, #1
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	791b      	ldrb	r3, [r3, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d3e4      	bcc.n	80029c0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fccd 	bl	800539a <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a0a:	d13c      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a10:	e02b      	b.n	8002a6a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3318      	adds	r3, #24
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d115      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da12      	bge.n	8002a64 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3317      	adds	r3, #23
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 faca 	bl	8002ff8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	3301      	adds	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d3cd      	bcc.n	8002a12 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fc85 	bl	800539a <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a9a:	d156      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa0:	e045      	b.n	8002b2e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d12e      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da2b      	bge.n	8002b28 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002adc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d121      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b24:	6053      	str	r3, [r2, #4]
            break;
 8002b26:	e008      	b.n	8002b3a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	791b      	ldrb	r3, [r3, #4]
 8002b32:	461a      	mov	r2, r3
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d3b3      	bcc.n	8002aa2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fc23 	bl	800539a <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5e:	d10a      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f005 f8e3 	bl	8007d2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fc0d 	bl	800539a <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d115      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f005 f8d3 	bl	8007d48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e000      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002bb4:	bf00      	nop
    }
  }
}
 8002bb6:	3734      	adds	r7, #52	@ 0x34
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_PCD_SetAddress+0x1a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e012      	b.n	8002bfc <HAL_PCD_SetAddress+0x40>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fb6c 	bl	80052ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	70fb      	strb	r3, [r7, #3]
 8002c16:	460b      	mov	r3, r1
 8002c18:	803b      	strh	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da0f      	bge.n	8002c4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 020f 	and.w	r2, r3, #15
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	3310      	adds	r3, #16
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3304      	adds	r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	705a      	strb	r2, [r3, #1]
 8002c48:	e00f      	b.n	8002c6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c76:	883b      	ldrh	r3, [r7, #0]
 8002c78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	78ba      	ldrb	r2, [r7, #2]
 8002c84:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d004      	beq.n	8002c98 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c98:	78bb      	ldrb	r3, [r7, #2]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_PCD_EP_Open+0xae>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e00e      	b.n	8002cd0 <HAL_PCD_EP_Open+0xcc>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68f9      	ldr	r1, [r7, #12]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fc9d 	bl	8004600 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002cce:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da0f      	bge.n	8002d0c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	f003 020f 	and.w	r2, r3, #15
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	3310      	adds	r3, #16
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	705a      	strb	r2, [r3, #1]
 8002d0a:	e00f      	b.n	8002d2c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	3304      	adds	r3, #4
 8002d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_PCD_EP_Close+0x6e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e00e      	b.n	8002d64 <HAL_PCD_EP_Close+0x8c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fcdb 	bl	8004710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	3304      	adds	r3, #4
 8002d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dae:	7afb      	ldrb	r3, [r7, #11]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	799b      	ldrb	r3, [r3, #6]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	799b      	ldrb	r3, [r3, #6]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	f001 fd78 	bl	80048c8 <USB_EPStartXfer>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 020f 	and.w	r2, r3, #15
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e04:	681b      	ldr	r3, [r3, #0]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	3310      	adds	r3, #16
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	799b      	ldrb	r3, [r3, #6]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	799b      	ldrb	r3, [r3, #6]
 8002e74:	461a      	mov	r2, r3
 8002e76:	6979      	ldr	r1, [r7, #20]
 8002e78:	f001 fd26 	bl	80048c8 <USB_EPStartXfer>

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	7912      	ldrb	r2, [r2, #4]
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04f      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da0f      	bge.n	8002ecc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	f003 020f 	and.w	r2, r3, #15
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	3310      	adds	r3, #16
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	705a      	strb	r2, [r3, #1]
 8002eca:	e00d      	b.n	8002ee8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	3304      	adds	r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_EP_SetStall+0x82>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e01d      	b.n	8002f44 <HAL_PCD_EP_SetStall+0xbe>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 f8b4 	bl	8005084 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7999      	ldrb	r1, [r3, #6]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f34:	461a      	mov	r2, r3
 8002f36:	f002 faf5 	bl	8005524 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	7912      	ldrb	r2, [r2, #4]
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e042      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	da0f      	bge.n	8002f92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	3310      	adds	r3, #16
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	705a      	strb	r2, [r3, #1]
 8002f90:	e00f      	b.n	8002fb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_EP_ClrStall+0x86>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e00e      	b.n	8002ff0 <HAL_PCD_EP_ClrStall+0xa4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 f8bd 	bl	8005160 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	da0c      	bge.n	8003026 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	3310      	adds	r3, #16
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	3304      	adds	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00c      	b.n	8003040 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	4618      	mov	r0, r3
 8003048:	f001 fedc 	bl	8004e04 <USB_EPStopXfer>
 800304c:	4603      	mov	r3, r0
 800304e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003050:	7afb      	ldrb	r3, [r7, #11]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	@ 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3310      	adds	r3, #16
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	429a      	cmp	r2, r3
 800308c:	d901      	bls.n	8003092 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06b      	b.n	800316a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d902      	bls.n	80030ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3303      	adds	r3, #3
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b6:	e02a      	b.n	800310e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3303      	adds	r3, #3
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	4603      	mov	r3, r0
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f001 ff31 	bl	8004f58 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	441a      	add	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	429a      	cmp	r2, r3
 8003122:	d809      	bhi.n	8003138 <PCD_WriteEmptyTxFifo+0xde>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312c:	429a      	cmp	r2, r3
 800312e:	d203      	bcs.n	8003138 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1bf      	bne.n	80030b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	d811      	bhi.n	8003168 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	2201      	movs	r2, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	43db      	mvns	r3, r3
 800315e:	6939      	ldr	r1, [r7, #16]
 8003160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003164:	4013      	ands	r3, r2
 8003166:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	333c      	adds	r3, #60	@ 0x3c
 800318c:	3304      	adds	r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	799b      	ldrb	r3, [r3, #6]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d17b      	bne.n	80032a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a61      	ldr	r2, [pc, #388]	@ (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	f240 80b9 	bls.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80b3 	beq.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e0a7      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	2320      	movs	r3, #32
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	e098      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 8093 	bne.w	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4a4b      	ldr	r2, [pc, #300]	@ (800333c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d90f      	bls.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	e07e      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	440b      	add	r3, r1
 8003254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d114      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800327c:	461a      	mov	r2, r3
 800327e:	2101      	movs	r1, #1
 8003280:	f002 f950 	bl	8005524 <USB_EP0_OutStart>
 8003284:	e006      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f004 fc82 	bl	8007ba4 <HAL_PCD_DataOutStageCallback>
 80032a0:	e046      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a26      	ldr	r2, [pc, #152]	@ (8003340 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d124      	bne.n	80032f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	e032      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	2320      	movs	r3, #32
 80032e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f004 fc59 	bl	8007ba4 <HAL_PCD_DataOutStageCallback>
 80032f2:	e01d      	b.n	8003330 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d114      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800331c:	461a      	mov	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f002 f900 	bl	8005524 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f004 fc3a 	bl	8007ba4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4f54300a 	.word	0x4f54300a
 8003340:	4f54310a 	.word	0x4f54310a

08003344 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	333c      	adds	r3, #60	@ 0x3c
 800335c:	3304      	adds	r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d90e      	bls.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	d009      	beq.n	8003398 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003396:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f004 fbf1 	bl	8007b80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <PCD_EP_OutSetupPacket_int+0x88>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d90c      	bls.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	799b      	ldrb	r3, [r3, #6]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d108      	bne.n	80033c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033b8:	461a      	mov	r2, r3
 80033ba:	2101      	movs	r1, #1
 80033bc:	f002 f8b2 	bl	8005524 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	4f54300a 	.word	0x4f54300a

080033d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
 80033dc:	4613      	mov	r3, r2
 80033de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033ee:	883b      	ldrh	r3, [r7, #0]
 80033f0:	0419      	lsls	r1, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80033fc:	e028      	b.n	8003450 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e00d      	b.n	800342e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	3340      	adds	r3, #64	@ 0x40
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4413      	add	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	3301      	adds	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	3b01      	subs	r3, #1
 8003434:	429a      	cmp	r2, r3
 8003436:	d3ec      	bcc.n	8003412 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003438:	883b      	ldrh	r3, [r7, #0]
 800343a:	0418      	lsls	r0, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	3b01      	subs	r3, #1
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4302      	orrs	r2, r0
 8003448:	3340      	adds	r3, #64	@ 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e267      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d075      	beq.n	80035a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034b6:	4b88      	ldr	r3, [pc, #544]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d00c      	beq.n	80034dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b85      	ldr	r3, [pc, #532]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d112      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4b82      	ldr	r3, [pc, #520]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	4b7e      	ldr	r3, [pc, #504]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05b      	beq.n	80035a0 <HAL_RCC_OscConfig+0x108>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d157      	bne.n	80035a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e242      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x74>
 80034fe:	4b76      	ldr	r3, [pc, #472]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a75      	ldr	r2, [pc, #468]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x98>
 8003516:	4b70      	ldr	r3, [pc, #448]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6f      	ldr	r2, [pc, #444]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6d      	ldr	r3, [pc, #436]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6c      	ldr	r2, [pc, #432]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xb0>
 8003530:	4b69      	ldr	r3, [pc, #420]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a68      	ldr	r2, [pc, #416]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b66      	ldr	r3, [pc, #408]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a65      	ldr	r2, [pc, #404]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd fdc2 	bl	80010d8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fd fdbe 	bl	80010d8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	@ 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e207      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5b      	ldr	r3, [pc, #364]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xc0>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fdae 	bl	80010d8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fdaa 	bl	80010d8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1f3      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b51      	ldr	r3, [pc, #324]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0xe8>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ae:	4b4a      	ldr	r3, [pc, #296]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b47      	ldr	r3, [pc, #284]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b44      	ldr	r3, [pc, #272]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b41      	ldr	r3, [pc, #260]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c7      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3b      	ldr	r3, [pc, #236]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4937      	ldr	r1, [pc, #220]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCC_OscConfig+0x244>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fd fd63 	bl	80010d8 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7fd fd5f 	bl	80010d8 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a8      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4925      	ldr	r1, [pc, #148]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <HAL_RCC_OscConfig+0x244>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fd42 	bl	80010d8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7fd fd3e 	bl	80010d8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e187      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <HAL_RCC_OscConfig+0x248>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd fd22 	bl	80010d8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7fd fd1e 	bl	80010d8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e167      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x200>
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_RCC_OscConfig+0x248>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fd fd0b 	bl	80010d8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	e00e      	b.n	80036e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c6:	f7fd fd07 	bl	80010d8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d907      	bls.n	80036e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e150      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470000 	.word	0x42470000
 80036e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ea      	bne.n	80036c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b81      	ldr	r3, [pc, #516]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b7d      	ldr	r3, [pc, #500]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	4a7c      	ldr	r2, [pc, #496]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	@ 0x40
 800371e:	4b7a      	ldr	r3, [pc, #488]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b77      	ldr	r3, [pc, #476]	@ (800390c <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d118      	bne.n	800376c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b74      	ldr	r3, [pc, #464]	@ (800390c <HAL_RCC_OscConfig+0x474>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	@ (800390c <HAL_RCC_OscConfig+0x474>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fd fcc7 	bl	80010d8 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374e:	f7fd fcc3 	bl	80010d8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e10c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	4b6a      	ldr	r3, [pc, #424]	@ (800390c <HAL_RCC_OscConfig+0x474>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x2ea>
 8003774:	4b64      	ldr	r3, [pc, #400]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	4a63      	ldr	r2, [pc, #396]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003780:	e01c      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x30c>
 800378a:	4b5f      	ldr	r3, [pc, #380]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a5e      	ldr	r2, [pc, #376]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	4b5c      	ldr	r3, [pc, #368]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	4a5b      	ldr	r2, [pc, #364]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0x324>
 80037a4:	4b58      	ldr	r3, [pc, #352]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4a57      	ldr	r2, [pc, #348]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b0:	4b55      	ldr	r3, [pc, #340]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	4a54      	ldr	r2, [pc, #336]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fc88 	bl	80010d8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd fc84 	bl	80010d8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0cb      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e2:	4b49      	ldr	r3, [pc, #292]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0ee      	beq.n	80037cc <HAL_RCC_OscConfig+0x334>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7fd fc72 	bl	80010d8 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fd fc6e 	bl	80010d8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e0b5      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380e:	4b3e      	ldr	r3, [pc, #248]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b39      	ldr	r3, [pc, #228]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	4a38      	ldr	r2, [pc, #224]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a1 	beq.w	8003978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003836:	4b34      	ldr	r3, [pc, #208]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d05c      	beq.n	80038fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d141      	bne.n	80038ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <HAL_RCC_OscConfig+0x478>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fd fc42 	bl	80010d8 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fd fc3e 	bl	80010d8 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e087      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b27      	ldr	r3, [pc, #156]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	019b      	lsls	r3, r3, #6
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	491b      	ldr	r1, [pc, #108]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_RCC_OscConfig+0x478>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fc17 	bl	80010d8 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fc13 	bl	80010d8 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e05c      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c0:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0f0      	beq.n	80038ae <HAL_RCC_OscConfig+0x416>
 80038cc:	e054      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fd fc00 	bl	80010d8 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fbfc 	bl	80010d8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e045      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x444>
 80038fa:	e03d      	b.n	8003978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e038      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
 8003908:	40023800 	.word	0x40023800
 800390c:	40007000 	.word	0x40007000
 8003910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003914:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <HAL_RCC_OscConfig+0x4ec>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d028      	beq.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d121      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d11a      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800394a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	3b01      	subs	r3, #1
 800395e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800

08003988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0cc      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800399c:	4b68      	ldr	r3, [pc, #416]	@ (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d90c      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b65      	ldr	r3, [pc, #404]	@ (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	@ (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a58      	ldr	r2, [pc, #352]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a52      	ldr	r2, [pc, #328]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d044      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d119      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b3f      	ldr	r3, [pc, #252]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e067      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4934      	ldr	r1, [pc, #208]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a78:	f7fd fb2e 	bl	80010d8 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fd fb2a 	bl	80010d8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b25      	ldr	r3, [pc, #148]	@ (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d20c      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	@ (8003b40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	@ (8003b48 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fa8e 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00
 8003b44:	40023800 	.word	0x40023800
 8003b48:	08009354 	.word	0x08009354
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	20000004 	.word	0x20000004

08003b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b094      	sub	sp, #80	@ 0x50
 8003b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6c:	4b79      	ldr	r3, [pc, #484]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	f200 80e1 	bhi.w	8003d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x34>
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b86:	e0db      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b73      	ldr	r3, [pc, #460]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b8c:	e0db      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b73      	ldr	r3, [pc, #460]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b6f      	ldr	r3, [pc, #444]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d063      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b6a      	ldr	r3, [pc, #424]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	f04f 0000 	mov.w	r0, #0
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd8:	0150      	lsls	r0, r2, #5
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4621      	mov	r1, r4
 8003be0:	1a51      	subs	r1, r2, r1
 8003be2:	6139      	str	r1, [r7, #16]
 8003be4:	4629      	mov	r1, r5
 8003be6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	018b      	lsls	r3, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c02:	4651      	mov	r1, sl
 8003c04:	018a      	lsls	r2, r1, #6
 8003c06:	4651      	mov	r1, sl
 8003c08:	ebb2 0801 	subs.w	r8, r2, r1
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c26:	4690      	mov	r8, r2
 8003c28:	4699      	mov	r9, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	eb18 0303 	adds.w	r3, r8, r3
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	462b      	mov	r3, r5
 8003c34:	eb49 0303 	adc.w	r3, r9, r3
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c46:	4629      	mov	r1, r5
 8003c48:	024b      	lsls	r3, r1, #9
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c50:	4621      	mov	r1, r4
 8003c52:	024a      	lsls	r2, r1, #9
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c64:	f7fc fb04 	bl	8000270 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	e058      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c72:	4b38      	ldr	r3, [pc, #224]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	f04f 0000 	mov.w	r0, #0
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	0159      	lsls	r1, r3, #5
 8003c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9e:	0150      	lsls	r0, r2, #5
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003caa:	4649      	mov	r1, r9
 8003cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	00eb      	lsls	r3, r5, #3
 8003cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cda:	00e2      	lsls	r2, r4, #3
 8003cdc:	4614      	mov	r4, r2
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	18e3      	adds	r3, r4, r3
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	eb45 0303 	adc.w	r3, r5, r3
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	61fa      	str	r2, [r7, #28]
 8003d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d18:	f7fc faaa 	bl	8000270 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4613      	mov	r3, r2
 8003d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3750      	adds	r7, #80	@ 0x50
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000000 	.word	0x20000000

08003d78 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003d7e:	f7fd f9ab 	bl	80010d8 <HAL_GetTick>
 8003d82:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d84:	4b5d      	ldr	r3, [pc, #372]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a5c      	ldr	r2, [pc, #368]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fd f9a1 	bl	80010d8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0a7      	b.n	8003ef4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003da4:	4b55      	ldr	r3, [pc, #340]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003db0:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a51      	ldr	r2, [pc, #324]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003dbc:	f7fd f98c 	bl	80010d8 <HAL_GetTick>
 8003dc0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dca:	f7fd f985 	bl	80010d8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e089      	b.n	8003ef4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003de0:	4b46      	ldr	r3, [pc, #280]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003dec:	f7fd f974 	bl	80010d8 <HAL_GetTick>
 8003df0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003df2:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a41      	ldr	r2, [pc, #260]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003df8:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd f96a 	bl	80010d8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e070      	b.n	8003ef4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003e12:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003e1e:	f7fd f95b 	bl	80010d8 <HAL_GetTick>
 8003e22:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003e24:	4b35      	ldr	r3, [pc, #212]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a34      	ldr	r2, [pc, #208]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e32:	f7fd f951 	bl	80010d8 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e057      	b.n	8003ef4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003e44:	4b2d      	ldr	r3, [pc, #180]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f0      	bne.n	8003e32 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003e50:	f7fd f942 	bl	80010d8 <HAL_GetTick>
 8003e54:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003e56:	4b29      	ldr	r3, [pc, #164]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a28      	ldr	r2, [pc, #160]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e60:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e64:	f7fd f938 	bl	80010d8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e03e      	b.n	8003ef4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003e76:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e84:	4a1e      	ldr	r2, [pc, #120]	@ (8003f00 <HAL_RCC_DeInit+0x188>)
 8003e86:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f04 <HAL_RCC_DeInit+0x18c>)
 8003e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e96:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003e9a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003e9c:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8003ea8:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003eae:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003eb2:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a10      	ldr	r2, [pc, #64]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003eba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ebe:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <HAL_RCC_DeInit+0x184>)
 8003ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed6:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_DeInit+0x190>)
 8003eda:	4a0c      	ldr	r2, [pc, #48]	@ (8003f0c <HAL_RCC_DeInit+0x194>)
 8003edc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ede:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <HAL_RCC_DeInit+0x198>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd f8b4 	bl	8001050 <HAL_InitTick>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	04003010 	.word	0x04003010
 8003f04:	20003000 	.word	0x20003000
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	20000004 	.word	0x20000004

08003f14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f14:	b084      	sub	sp, #16
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	f107 001c 	add.w	r0, r7, #28
 8003f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d123      	bne.n	8003f76 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 fb38 	bl	80055e0 <USB_CoreReset>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e01b      	b.n	8003fae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 fb2c 	bl	80055e0 <USB_CoreReset>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fa0:	e005      	b.n	8003fae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fae:	7fbb      	ldrb	r3, [r7, #30]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10b      	bne.n	8003fcc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f043 0206 	orr.w	r2, r3, #6
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fd8:	b004      	add	sp, #16
 8003fda:	4770      	bx	lr

08003fdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d165      	bne.n	80040bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	@ (80040f8 <USB_SetTurnaroundTime+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d906      	bls.n	8004006 <USB_SetTurnaroundTime+0x2a>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a40      	ldr	r2, [pc, #256]	@ (80040fc <USB_SetTurnaroundTime+0x120>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d202      	bcs.n	8004006 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004000:	230f      	movs	r3, #15
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e062      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4a3c      	ldr	r2, [pc, #240]	@ (80040fc <USB_SetTurnaroundTime+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d306      	bcc.n	800401c <USB_SetTurnaroundTime+0x40>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a3b      	ldr	r2, [pc, #236]	@ (8004100 <USB_SetTurnaroundTime+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d202      	bcs.n	800401c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004016:	230e      	movs	r3, #14
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e057      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a38      	ldr	r2, [pc, #224]	@ (8004100 <USB_SetTurnaroundTime+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d306      	bcc.n	8004032 <USB_SetTurnaroundTime+0x56>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a37      	ldr	r2, [pc, #220]	@ (8004104 <USB_SetTurnaroundTime+0x128>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d202      	bcs.n	8004032 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800402c:	230d      	movs	r3, #13
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	e04c      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4a33      	ldr	r2, [pc, #204]	@ (8004104 <USB_SetTurnaroundTime+0x128>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d306      	bcc.n	8004048 <USB_SetTurnaroundTime+0x6c>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a32      	ldr	r2, [pc, #200]	@ (8004108 <USB_SetTurnaroundTime+0x12c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004042:	230c      	movs	r3, #12
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e041      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4a2f      	ldr	r2, [pc, #188]	@ (8004108 <USB_SetTurnaroundTime+0x12c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d906      	bls.n	800405e <USB_SetTurnaroundTime+0x82>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a2e      	ldr	r2, [pc, #184]	@ (800410c <USB_SetTurnaroundTime+0x130>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d802      	bhi.n	800405e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004058:	230b      	movs	r3, #11
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e036      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4a2a      	ldr	r2, [pc, #168]	@ (800410c <USB_SetTurnaroundTime+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d906      	bls.n	8004074 <USB_SetTurnaroundTime+0x98>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a29      	ldr	r2, [pc, #164]	@ (8004110 <USB_SetTurnaroundTime+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d802      	bhi.n	8004074 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800406e:	230a      	movs	r3, #10
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e02b      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <USB_SetTurnaroundTime+0x134>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d906      	bls.n	800408a <USB_SetTurnaroundTime+0xae>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a25      	ldr	r2, [pc, #148]	@ (8004114 <USB_SetTurnaroundTime+0x138>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d202      	bcs.n	800408a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004084:	2309      	movs	r3, #9
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e020      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a21      	ldr	r2, [pc, #132]	@ (8004114 <USB_SetTurnaroundTime+0x138>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d306      	bcc.n	80040a0 <USB_SetTurnaroundTime+0xc4>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4a20      	ldr	r2, [pc, #128]	@ (8004118 <USB_SetTurnaroundTime+0x13c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d802      	bhi.n	80040a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800409a:	2308      	movs	r3, #8
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e015      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <USB_SetTurnaroundTime+0x13c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d906      	bls.n	80040b6 <USB_SetTurnaroundTime+0xda>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	@ (800411c <USB_SetTurnaroundTime+0x140>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d202      	bcs.n	80040b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040b0:	2307      	movs	r3, #7
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e00a      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040b6:	2306      	movs	r3, #6
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e007      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040c2:	2309      	movs	r3, #9
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e001      	b.n	80040cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040c8:	2309      	movs	r3, #9
 80040ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	029b      	lsls	r3, r3, #10
 80040e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	00d8acbf 	.word	0x00d8acbf
 80040fc:	00e4e1c0 	.word	0x00e4e1c0
 8004100:	00f42400 	.word	0x00f42400
 8004104:	01067380 	.word	0x01067380
 8004108:	011a499f 	.word	0x011a499f
 800410c:	01312cff 	.word	0x01312cff
 8004110:	014ca43f 	.word	0x014ca43f
 8004114:	016e3600 	.word	0x016e3600
 8004118:	01a6ab1f 	.word	0x01a6ab1f
 800411c:	01e84800 	.word	0x01e84800

08004120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f043 0201 	orr.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0201 	bic.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d115      	bne.n	80041b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004192:	200a      	movs	r0, #10
 8004194:	f7fc ffac 	bl	80010f0 <HAL_Delay>
      ms += 10U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	330a      	adds	r3, #10
 800419c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f001 f98e 	bl	80054c0 <USB_GetMode>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d01e      	beq.n	80041e8 <USB_SetCurrentMode+0x84>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80041ae:	d9f0      	bls.n	8004192 <USB_SetCurrentMode+0x2e>
 80041b0:	e01a      	b.n	80041e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d115      	bne.n	80041e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041c4:	200a      	movs	r0, #10
 80041c6:	f7fc ff93 	bl	80010f0 <HAL_Delay>
      ms += 10U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	330a      	adds	r3, #10
 80041ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f001 f975 	bl	80054c0 <USB_GetMode>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <USB_SetCurrentMode+0x84>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2bc7      	cmp	r3, #199	@ 0xc7
 80041e0:	d9f0      	bls.n	80041c4 <USB_SetCurrentMode+0x60>
 80041e2:	e001      	b.n	80041e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e005      	b.n	80041f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80041ec:	d101      	bne.n	80041f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041fc:	b084      	sub	sp, #16
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800420a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e009      	b.n	8004230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3340      	adds	r3, #64	@ 0x40
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b0e      	cmp	r3, #14
 8004234:	d9f2      	bls.n	800421c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11c      	bne.n	8004278 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	639a      	str	r2, [r3, #56]	@ 0x38
 8004276:	e00b      	b.n	8004290 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004296:	461a      	mov	r2, r3
 8004298:	2300      	movs	r3, #0
 800429a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800429c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10d      	bne.n	80042c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ac:	2100      	movs	r1, #0
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f968 	bl	8004584 <USB_SetDevSpeed>
 80042b4:	e008      	b.n	80042c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042b6:	2101      	movs	r1, #1
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f963 	bl	8004584 <USB_SetDevSpeed>
 80042be:	e003      	b.n	80042c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042c0:	2103      	movs	r1, #3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f95e 	bl	8004584 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042c8:	2110      	movs	r1, #16
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8fa 	bl	80044c4 <USB_FlushTxFifo>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f924 	bl	8004528 <USB_FlushRxFifo>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f0:	461a      	mov	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fc:	461a      	mov	r2, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e043      	b.n	800439c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800432a:	d118      	bne.n	800435e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433e:	461a      	mov	r2, r3
 8004340:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e013      	b.n	8004370 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004354:	461a      	mov	r2, r3
 8004356:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e008      	b.n	8004370 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800438e:	461a      	mov	r2, r3
 8004390:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004394:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3301      	adds	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043a0:	461a      	mov	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d3b5      	bcc.n	8004314 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e043      	b.n	8004436 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043c4:	d118      	bne.n	80043f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e013      	b.n	800440a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e008      	b.n	800440a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	461a      	mov	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004416:	461a      	mov	r2, r3
 8004418:	2300      	movs	r3, #0
 800441a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004428:	461a      	mov	r2, r3
 800442a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800442e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	3301      	adds	r3, #1
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800443a:	461a      	mov	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4293      	cmp	r3, r2
 8004440:	d3b5      	bcc.n	80043ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004454:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004462:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004464:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f043 0210 	orr.w	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <USB_DevInit+0x2c4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004484:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f043 0208 	orr.w	r2, r3, #8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004498:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	803c3800 	.word	0x803c3800

080044c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044de:	d901      	bls.n	80044e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e01b      	b.n	800451c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	daf2      	bge.n	80044d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	019b      	lsls	r3, r3, #6
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004508:	d901      	bls.n	800450e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e006      	b.n	800451c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b20      	cmp	r3, #32
 8004518:	d0f0      	beq.n	80044fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004540:	d901      	bls.n	8004546 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e018      	b.n	8004578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	daf2      	bge.n	8004534 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2210      	movs	r2, #16
 8004556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004564:	d901      	bls.n	800456a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e006      	b.n	8004578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b10      	cmp	r3, #16
 8004574:	d0f0      	beq.n	8004558 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
 80045da:	e00a      	b.n	80045f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d002      	beq.n	80045e8 <USB_GetDevSpeed+0x32>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d102      	bne.n	80045ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045e8:	2302      	movs	r3, #2
 80045ea:	75fb      	strb	r3, [r7, #23]
 80045ec:	e001      	b.n	80045f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045ee:	230f      	movs	r3, #15
 80045f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d13a      	bne.n	8004692 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2101      	movs	r1, #1
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	b29b      	uxth	r3, r3
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800463a:	4313      	orrs	r3, r2
 800463c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d155      	bne.n	8004700 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	791b      	ldrb	r3, [r3, #4]
 800466e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004670:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	059b      	lsls	r3, r3, #22
 8004676:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004678:	4313      	orrs	r3, r2
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	0151      	lsls	r1, r2, #5
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	440a      	add	r2, r1
 8004682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e036      	b.n	8004700 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	2101      	movs	r1, #1
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11a      	bne.n	8004700 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	791b      	ldrb	r3, [r3, #4]
 80046e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046e6:	430b      	orrs	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d161      	bne.n	80047f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800473e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004742:	d11f      	bne.n	8004784 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800475e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004762:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	0151      	lsls	r1, r2, #5
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	440a      	add	r2, r1
 800477a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800477e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004782:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800478a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047a4:	4013      	ands	r3, r2
 80047a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	b29b      	uxth	r3, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047c8:	4013      	ands	r3, r2
 80047ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	0159      	lsls	r1, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	440b      	add	r3, r1
 80047e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e6:	4619      	mov	r1, r3
 80047e8:	4b35      	ldr	r3, [pc, #212]	@ (80048c0 <USB_DeactivateEndpoint+0x1b0>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
 80047ee:	e060      	b.n	80048b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004806:	d11f      	bne.n	8004848 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004822:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004826:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004842:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	43db      	mvns	r3, r3
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004868:	4013      	ands	r3, r2
 800486a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	2101      	movs	r1, #1
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	43db      	mvns	r3, r3
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800488c:	4013      	ands	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0159      	lsls	r1, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	440b      	add	r3, r1
 80048a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048aa:	4619      	mov	r1, r3
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <USB_DeactivateEndpoint+0x1b4>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	ec337800 	.word	0xec337800
 80048c4:	eff37800 	.word	0xeff37800

080048c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 817f 	bne.w	8004be8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d132      	bne.n	8004958 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800490c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004910:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004914:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004930:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004950:	0cdb      	lsrs	r3, r3, #19
 8004952:	04db      	lsls	r3, r3, #19
 8004954:	6113      	str	r3, [r2, #16]
 8004956:	e097      	b.n	8004a88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004972:	0cdb      	lsrs	r3, r3, #19
 8004974:	04db      	lsls	r3, r3, #19
 8004976:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004992:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004996:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800499a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d11a      	bne.n	80049d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d903      	bls.n	80049b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049d4:	6113      	str	r3, [r2, #16]
 80049d6:	e044      	b.n	8004a62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	8afb      	ldrh	r3, [r7, #22]
 80049fe:	04d9      	lsls	r1, r3, #19
 8004a00:	4ba4      	ldr	r3, [pc, #656]	@ (8004c94 <USB_EPStartXfer+0x3cc>)
 8004a02:	400b      	ands	r3, r1
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	0148      	lsls	r0, r1, #5
 8004a08:	69f9      	ldr	r1, [r7, #28]
 8004a0a:	4401      	add	r1, r0
 8004a0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a10:	4313      	orrs	r3, r2
 8004a12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	791b      	ldrb	r3, [r3, #4]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d122      	bne.n	8004a62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004a3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	8afb      	ldrh	r3, [r7, #22]
 8004a4c:	075b      	lsls	r3, r3, #29
 8004a4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	0148      	lsls	r0, r1, #5
 8004a56:	69f9      	ldr	r1, [r7, #28]
 8004a58:	4401      	add	r1, r0
 8004a5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	0148      	lsls	r0, r1, #5
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	4401      	add	r1, r0
 8004a80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a84:	4313      	orrs	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d14b      	bne.n	8004b26 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	791b      	ldrb	r3, [r3, #4]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d128      	bne.n	8004b04 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d110      	bne.n	8004ae4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004adc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e00f      	b.n	8004b04 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b1e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e166      	b.n	8004df4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b40:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b44:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d015      	beq.n	8004b7a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 814e 	beq.w	8004df4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	2101      	movs	r1, #1
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	634b      	str	r3, [r1, #52]	@ 0x34
 8004b78:	e13c      	b.n	8004df4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d110      	bne.n	8004bac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ba4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e00f      	b.n	8004bcc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	68d9      	ldr	r1, [r3, #12]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	b298      	uxth	r0, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4603      	mov	r3, r0
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f9b9 	bl	8004f58 <USB_WritePacket>
 8004be6:	e105      	b.n	8004df4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c02:	0cdb      	lsrs	r3, r3, #19
 8004c04:	04db      	lsls	r3, r3, #19
 8004c06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c22:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c26:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c2a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d132      	bne.n	8004c98 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	0148      	lsls	r0, r1, #5
 8004c64:	69f9      	ldr	r1, [r7, #28]
 8004c66:	4401      	add	r1, r0
 8004c68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c8e:	6113      	str	r3, [r2, #16]
 8004c90:	e062      	b.n	8004d58 <USB_EPStartXfer+0x490>
 8004c92:	bf00      	nop
 8004c94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d123      	bne.n	8004ce8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb6:	69b9      	ldr	r1, [r7, #24]
 8004cb8:	0148      	lsls	r0, r1, #5
 8004cba:	69f9      	ldr	r1, [r7, #28]
 8004cbc:	4401      	add	r1, r0
 8004cbe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ce4:	6113      	str	r3, [r2, #16]
 8004ce6:	e037      	b.n	8004d58 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	8afa      	ldrh	r2, [r7, #22]
 8004d04:	fb03 f202 	mul.w	r2, r3, r2
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	04d9      	lsls	r1, r3, #19
 8004d1e:	4b38      	ldr	r3, [pc, #224]	@ (8004e00 <USB_EPStartXfer+0x538>)
 8004d20:	400b      	ands	r3, r1
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	0148      	lsls	r0, r1, #5
 8004d26:	69f9      	ldr	r1, [r7, #28]
 8004d28:	4401      	add	r1, r0
 8004d2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10d      	bne.n	8004d7a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	68d9      	ldr	r1, [r3, #12]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d76:	460a      	mov	r2, r1
 8004d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	791b      	ldrb	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d128      	bne.n	8004dd4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00f      	b.n	8004dd4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	1ff80000 	.word	0x1ff80000

08004e04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d14a      	bne.n	8004eb8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e3a:	f040 8086 	bne.w	8004f4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d902      	bls.n	8004e9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
          break;
 8004e9a:	e056      	b.n	8004f4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eb4:	d0e7      	beq.n	8004e86 <USB_EPStopXfer+0x82>
 8004eb6:	e048      	b.n	8004f4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed0:	d13b      	bne.n	8004f4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ef0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ef4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d902      	bls.n	8004f30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f2e:	e00c      	b.n	8004f4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f48:	d0e7      	beq.n	8004f1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	@ 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d123      	bne.n	8004fc6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f7e:	88bb      	ldrh	r3, [r7, #4]
 8004f80:	3303      	adds	r3, #3
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	e018      	b.n	8004fbe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	031a      	lsls	r2, r3, #12
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f98:	461a      	mov	r2, r3
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d3e2      	bcc.n	8004f8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3724      	adds	r7, #36	@ 0x24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b08b      	sub	sp, #44	@ 0x2c
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	089b      	lsrs	r3, r3, #2
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	e014      	b.n	800502a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	601a      	str	r2, [r3, #0]
    pDest++;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	3301      	adds	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	3301      	adds	r3, #1
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	3301      	adds	r3, #1
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	3301      	adds	r3, #1
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	3301      	adds	r3, #1
 8005028:	623b      	str	r3, [r7, #32]
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	429a      	cmp	r2, r3
 8005030:	d3e6      	bcc.n	8005000 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005032:	8bfb      	ldrh	r3, [r7, #30]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005042:	461a      	mov	r2, r3
 8005044:	f107 0310 	add.w	r3, r7, #16
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	b2da      	uxtb	r2, r3
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	701a      	strb	r2, [r3, #0]
      i++;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	3301      	adds	r3, #1
 8005062:	623b      	str	r3, [r7, #32]
      pDest++;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	3301      	adds	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800506a:	8bfb      	ldrh	r3, [r7, #30]
 800506c:	3b01      	subs	r3, #1
 800506e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005070:	8bfb      	ldrh	r3, [r7, #30]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1ea      	bne.n	800504c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005078:	4618      	mov	r0, r3
 800507a:	372c      	adds	r7, #44	@ 0x2c
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d12c      	bne.n	80050fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db12      	blt.n	80050d8 <USB_EPSetStall+0x54>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00f      	beq.n	80050d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e02b      	b.n	8005152 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	db12      	blt.n	8005132 <USB_EPSetStall+0xae>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00f      	beq.n	8005132 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800512c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005130:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800514c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005150:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d128      	bne.n	80051ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005196:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800519a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d003      	beq.n	80051ac <USB_EPClearStall+0x4c>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	791b      	ldrb	r3, [r3, #4]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d138      	bne.n	800521e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	e027      	b.n	800521e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	791b      	ldrb	r3, [r3, #4]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d003      	beq.n	80051fe <USB_EPClearStall+0x9e>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	791b      	ldrb	r3, [r3, #4]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d10f      	bne.n	800521e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800521c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e016      	b.n	800526c <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005250:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005264:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	3301      	adds	r3, #1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b0e      	cmp	r3, #14
 8005270:	d9e5      	bls.n	800523e <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005278:	461a      	mov	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005290:	461a      	mov	r2, r3
 8005292:	2300      	movs	r3, #0
 8005294:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff f946 	bl	8004528 <USB_FlushRxFifo>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <USB_StopDevice+0x7e>
  {
    return ret;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	e00b      	b.n	80052c2 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 80052aa:	2110      	movs	r1, #16
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff f909 	bl	80044c4 <USB_FlushTxFifo>
 80052b2:	4603      	mov	r3, r0
 80052b4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <USB_StopDevice+0x94>
  {
    return ret;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	e000      	b.n	80052c2 <USB_StopDevice+0x96>
  }

  return ret;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80052ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005344:	f023 0302 	bic.w	r3, r3, #2
 8005348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005386:	f043 0302 	orr.w	r3, r3, #2
 800538a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4013      	ands	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	0c1b      	lsrs	r3, r3, #16
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4013      	ands	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	b29b      	uxth	r3, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	4013      	ands	r3, r2
 8005454:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005456:	68bb      	ldr	r3, [r7, #8]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005486:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
 8005494:	01db      	lsls	r3, r3, #7
 8005496:	b2db      	uxtb	r3, r3
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4013      	ands	r3, r2
 80054b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054b2:	68bb      	ldr	r3, [r7, #8]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0301 	and.w	r3, r3, #1
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054f6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80054fa:	f023 0307 	bic.w	r3, r3, #7
 80054fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800550e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005512:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	460b      	mov	r3, r1
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	333c      	adds	r3, #60	@ 0x3c
 800553a:	3304      	adds	r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <USB_EP0_OutStart+0xb8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d90a      	bls.n	800555e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005558:	d101      	bne.n	800555e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e037      	b.n	80055ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	2300      	movs	r3, #0
 8005568:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800557c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800558c:	f043 0318 	orr.w	r3, r3, #24
 8005590:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80055a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055a6:	7afb      	ldrb	r3, [r7, #11]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d10f      	bne.n	80055cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055c6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80055ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	4f54300a 	.word	0x4f54300a

080055e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055f8:	d901      	bls.n	80055fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e01b      	b.n	8005636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	daf2      	bge.n	80055ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f043 0201 	orr.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3301      	adds	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005622:	d901      	bls.n	8005628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e006      	b.n	8005636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d0f0      	beq.n	8005616 <USB_CoreReset+0x36>

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005650:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005654:	f002 fd46 	bl	80080e4 <USBD_static_malloc>
 8005658:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	32b0      	adds	r2, #176	@ 0xb0
 800566a:	2100      	movs	r1, #0
 800566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005670:	2302      	movs	r3, #2
 8005672:	e0d4      	b.n	800581e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005674:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005678:	2100      	movs	r1, #0
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f002 ff80 	bl	8008580 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	32b0      	adds	r2, #176	@ 0xb0
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	32b0      	adds	r2, #176	@ 0xb0
 800569a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7c1b      	ldrb	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d138      	bne.n	800571e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056ac:	4b5e      	ldr	r3, [pc, #376]	@ (8005828 <USBD_CDC_Init+0x1e4>)
 80056ae:	7819      	ldrb	r1, [r3, #0]
 80056b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056b4:	2202      	movs	r2, #2
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 fbf1 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005828 <USBD_CDC_Init+0x1e4>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 020f 	and.w	r2, r3, #15
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	2201      	movs	r2, #1
 80056d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056d6:	4b55      	ldr	r3, [pc, #340]	@ (800582c <USBD_CDC_Init+0x1e8>)
 80056d8:	7819      	ldrb	r1, [r3, #0]
 80056da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056de:	2202      	movs	r2, #2
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f002 fbdc 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056e6:	4b51      	ldr	r3, [pc, #324]	@ (800582c <USBD_CDC_Init+0x1e8>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80056fe:	2201      	movs	r2, #1
 8005700:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005702:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <USBD_CDC_Init+0x1ec>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 020f 	and.w	r2, r3, #15
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3326      	adds	r3, #38	@ 0x26
 8005718:	2210      	movs	r2, #16
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e035      	b.n	800578a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800571e:	4b42      	ldr	r3, [pc, #264]	@ (8005828 <USBD_CDC_Init+0x1e4>)
 8005720:	7819      	ldrb	r1, [r3, #0]
 8005722:	2340      	movs	r3, #64	@ 0x40
 8005724:	2202      	movs	r2, #2
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f002 fbb9 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800572c:	4b3e      	ldr	r3, [pc, #248]	@ (8005828 <USBD_CDC_Init+0x1e4>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	3324      	adds	r3, #36	@ 0x24
 8005742:	2201      	movs	r2, #1
 8005744:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005746:	4b39      	ldr	r3, [pc, #228]	@ (800582c <USBD_CDC_Init+0x1e8>)
 8005748:	7819      	ldrb	r1, [r3, #0]
 800574a:	2340      	movs	r3, #64	@ 0x40
 800574c:	2202      	movs	r2, #2
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f002 fba5 	bl	8007e9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005754:	4b35      	ldr	r3, [pc, #212]	@ (800582c <USBD_CDC_Init+0x1e8>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800576c:	2201      	movs	r2, #1
 800576e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005770:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <USBD_CDC_Init+0x1ec>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	3326      	adds	r3, #38	@ 0x26
 8005786:	2210      	movs	r2, #16
 8005788:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800578a:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <USBD_CDC_Init+0x1ec>)
 800578c:	7819      	ldrb	r1, [r3, #0]
 800578e:	2308      	movs	r3, #8
 8005790:	2203      	movs	r2, #3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fb83 	bl	8007e9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005798:	4b25      	ldr	r3, [pc, #148]	@ (8005830 <USBD_CDC_Init+0x1ec>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3324      	adds	r3, #36	@ 0x24
 80057ae:	2201      	movs	r2, #1
 80057b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	33b0      	adds	r3, #176	@ 0xb0
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057e8:	2302      	movs	r3, #2
 80057ea:	e018      	b.n	800581e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c1b      	ldrb	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057f4:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <USBD_CDC_Init+0x1e8>)
 80057f6:	7819      	ldrb	r1, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80057fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f002 fc3a 	bl	800807c <USBD_LL_PrepareReceive>
 8005808:	e008      	b.n	800581c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800580a:	4b08      	ldr	r3, [pc, #32]	@ (800582c <USBD_CDC_Init+0x1e8>)
 800580c:	7819      	ldrb	r1, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005814:	2340      	movs	r3, #64	@ 0x40
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f002 fc30 	bl	800807c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000093 	.word	0x20000093
 800582c:	20000094 	.word	0x20000094
 8005830:	20000095 	.word	0x20000095

08005834 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005840:	4b3a      	ldr	r3, [pc, #232]	@ (800592c <USBD_CDC_DeInit+0xf8>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f002 fb4f 	bl	8007eea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800584c:	4b37      	ldr	r3, [pc, #220]	@ (800592c <USBD_CDC_DeInit+0xf8>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f003 020f 	and.w	r2, r3, #15
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	3324      	adds	r3, #36	@ 0x24
 8005862:	2200      	movs	r2, #0
 8005864:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005866:	4b32      	ldr	r3, [pc, #200]	@ (8005930 <USBD_CDC_DeInit+0xfc>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f002 fb3c 	bl	8007eea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005872:	4b2f      	ldr	r3, [pc, #188]	@ (8005930 <USBD_CDC_DeInit+0xfc>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f003 020f 	and.w	r2, r3, #15
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800588a:	2200      	movs	r2, #0
 800588c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800588e:	4b29      	ldr	r3, [pc, #164]	@ (8005934 <USBD_CDC_DeInit+0x100>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f002 fb28 	bl	8007eea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800589a:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <USBD_CDC_DeInit+0x100>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	3324      	adds	r3, #36	@ 0x24
 80058b0:	2200      	movs	r2, #0
 80058b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005934 <USBD_CDC_DeInit+0x100>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3326      	adds	r3, #38	@ 0x26
 80058ca:	2200      	movs	r2, #0
 80058cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	32b0      	adds	r2, #176	@ 0xb0
 80058d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01f      	beq.n	8005920 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	33b0      	adds	r3, #176	@ 0xb0
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	32b0      	adds	r2, #176	@ 0xb0
 80058fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005902:	4618      	mov	r0, r3
 8005904:	f002 fbfc 	bl	8008100 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	32b0      	adds	r2, #176	@ 0xb0
 8005912:	2100      	movs	r1, #0
 8005914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000093 	.word	0x20000093
 8005930:	20000094 	.word	0x20000094
 8005934:	20000095 	.word	0x20000095

08005938 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	32b0      	adds	r2, #176	@ 0xb0
 800594c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005950:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	e0bf      	b.n	8005ae8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005970:	2b00      	cmp	r3, #0
 8005972:	d050      	beq.n	8005a16 <USBD_CDC_Setup+0xde>
 8005974:	2b20      	cmp	r3, #32
 8005976:	f040 80af 	bne.w	8005ad8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	88db      	ldrh	r3, [r3, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d03a      	beq.n	80059f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b25b      	sxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	da1b      	bge.n	80059c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	33b0      	adds	r3, #176	@ 0xb0
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80059a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	88d2      	ldrh	r2, [r2, #6]
 80059a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	88db      	ldrh	r3, [r3, #6]
 80059ae:	2b07      	cmp	r3, #7
 80059b0:	bf28      	it	cs
 80059b2:	2307      	movcs	r3, #7
 80059b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	89fa      	ldrh	r2, [r7, #14]
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fdc3 	bl	8007548 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059c2:	e090      	b.n	8005ae6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	785a      	ldrb	r2, [r3, #1]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	88db      	ldrh	r3, [r3, #6]
 80059d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80059d4:	d803      	bhi.n	80059de <USBD_CDC_Setup+0xa6>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	88db      	ldrh	r3, [r3, #6]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	e000      	b.n	80059e0 <USBD_CDC_Setup+0xa8>
 80059de:	2240      	movs	r2, #64	@ 0x40
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059e6:	6939      	ldr	r1, [r7, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80059ee:	461a      	mov	r2, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 fdd5 	bl	80075a0 <USBD_CtlPrepareRx>
      break;
 80059f6:	e076      	b.n	8005ae6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	33b0      	adds	r3, #176	@ 0xb0
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	7850      	ldrb	r0, [r2, #1]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	4798      	blx	r3
      break;
 8005a14:	e067      	b.n	8005ae6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b0b      	cmp	r3, #11
 8005a1c:	d851      	bhi.n	8005ac2 <USBD_CDC_Setup+0x18a>
 8005a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <USBD_CDC_Setup+0xec>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a55 	.word	0x08005a55
 8005a28:	08005ad1 	.word	0x08005ad1
 8005a2c:	08005ac3 	.word	0x08005ac3
 8005a30:	08005ac3 	.word	0x08005ac3
 8005a34:	08005ac3 	.word	0x08005ac3
 8005a38:	08005ac3 	.word	0x08005ac3
 8005a3c:	08005ac3 	.word	0x08005ac3
 8005a40:	08005ac3 	.word	0x08005ac3
 8005a44:	08005ac3 	.word	0x08005ac3
 8005a48:	08005ac3 	.word	0x08005ac3
 8005a4c:	08005a7f 	.word	0x08005a7f
 8005a50:	08005aa9 	.word	0x08005aa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d107      	bne.n	8005a70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a60:	f107 030a 	add.w	r3, r7, #10
 8005a64:	2202      	movs	r2, #2
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f001 fd6d 	bl	8007548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a6e:	e032      	b.n	8005ad6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 fceb 	bl	800744e <USBD_CtlError>
            ret = USBD_FAIL;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a7c:	e02b      	b.n	8005ad6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d107      	bne.n	8005a9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a8a:	f107 030d 	add.w	r3, r7, #13
 8005a8e:	2201      	movs	r2, #1
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fd58 	bl	8007548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a98:	e01d      	b.n	8005ad6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 fcd6 	bl	800744e <USBD_CtlError>
            ret = USBD_FAIL;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa6:	e016      	b.n	8005ad6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d00f      	beq.n	8005ad4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fcc9 	bl	800744e <USBD_CtlError>
            ret = USBD_FAIL;
 8005abc:	2303      	movs	r3, #3
 8005abe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ac0:	e008      	b.n	8005ad4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 fcc2 	bl	800744e <USBD_CtlError>
          ret = USBD_FAIL;
 8005aca:	2303      	movs	r3, #3
 8005acc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ace:	e002      	b.n	8005ad6 <USBD_CDC_Setup+0x19e>
          break;
 8005ad0:	bf00      	nop
 8005ad2:	e008      	b.n	8005ae6 <USBD_CDC_Setup+0x1ae>
          break;
 8005ad4:	bf00      	nop
      }
      break;
 8005ad6:	e006      	b.n	8005ae6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 fcb7 	bl	800744e <USBD_CtlError>
      ret = USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005b02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	32b0      	adds	r2, #176	@ 0xb0
 8005b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e065      	b.n	8005be6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	32b0      	adds	r2, #176	@ 0xb0
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 020f 	and.w	r2, r3, #15
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d02f      	beq.n	8005ba4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	f003 020f 	and.w	r2, r3, #15
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	3318      	adds	r3, #24
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	f003 010f 	and.w	r1, r3, #15
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	460b      	mov	r3, r1
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	440b      	add	r3, r1
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4403      	add	r3, r0
 8005b6c:	331c      	adds	r3, #28
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d112      	bne.n	8005ba4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	3318      	adds	r3, #24
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b96:	78f9      	ldrb	r1, [r7, #3]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f002 fa4c 	bl	800803a <USBD_LL_Transmit>
 8005ba2:	e01f      	b.n	8005be4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	33b0      	adds	r3, #176	@ 0xb0
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	33b0      	adds	r3, #176	@ 0xb0
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	32b0      	adds	r2, #176	@ 0xb0
 8005c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	32b0      	adds	r2, #176	@ 0xb0
 8005c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e01a      	b.n	8005c56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	4619      	mov	r1, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f002 fa4a 	bl	80080be <USBD_LL_GetRxDataSize>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	33b0      	adds	r3, #176	@ 0xb0
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005c50:	4611      	mov	r1, r2
 8005c52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	32b0      	adds	r2, #176	@ 0xb0
 8005c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e024      	b.n	8005cca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	33b0      	adds	r3, #176	@ 0xb0
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d019      	beq.n	8005cc8 <USBD_CDC_EP0_RxReady+0x6a>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005c9a:	2bff      	cmp	r3, #255	@ 0xff
 8005c9c:	d014      	beq.n	8005cc8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	33b0      	adds	r3, #176	@ 0xb0
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005cb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cbe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	22ff      	movs	r2, #255	@ 0xff
 8005cc4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cdc:	2182      	movs	r1, #130	@ 0x82
 8005cde:	4818      	ldr	r0, [pc, #96]	@ (8005d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ce0:	f000 fd7f 	bl	80067e2 <USBD_GetEpDesc>
 8005ce4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4815      	ldr	r0, [pc, #84]	@ (8005d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cea:	f000 fd7a 	bl	80067e2 <USBD_GetEpDesc>
 8005cee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cf0:	2181      	movs	r1, #129	@ 0x81
 8005cf2:	4813      	ldr	r0, [pc, #76]	@ (8005d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cf4:	f000 fd75 	bl	80067e2 <USBD_GetEpDesc>
 8005cf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2210      	movs	r2, #16
 8005d04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d006      	beq.n	8005d1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d14:	711a      	strb	r2, [r3, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d28:	711a      	strb	r2, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2243      	movs	r2, #67	@ 0x43
 8005d32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d34:	4b02      	ldr	r3, [pc, #8]	@ (8005d40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000050 	.word	0x20000050

08005d44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d4c:	2182      	movs	r1, #130	@ 0x82
 8005d4e:	4818      	ldr	r0, [pc, #96]	@ (8005db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d50:	f000 fd47 	bl	80067e2 <USBD_GetEpDesc>
 8005d54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d56:	2101      	movs	r1, #1
 8005d58:	4815      	ldr	r0, [pc, #84]	@ (8005db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d5a:	f000 fd42 	bl	80067e2 <USBD_GetEpDesc>
 8005d5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d60:	2181      	movs	r1, #129	@ 0x81
 8005d62:	4813      	ldr	r0, [pc, #76]	@ (8005db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d64:	f000 fd3d 	bl	80067e2 <USBD_GetEpDesc>
 8005d68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2210      	movs	r2, #16
 8005d74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d006      	beq.n	8005d8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	711a      	strb	r2, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f042 0202 	orr.w	r2, r2, #2
 8005d88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d006      	beq.n	8005d9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	711a      	strb	r2, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f042 0202 	orr.w	r2, r2, #2
 8005d9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2243      	movs	r2, #67	@ 0x43
 8005da2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005da4:	4b02      	ldr	r3, [pc, #8]	@ (8005db0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000050 	.word	0x20000050

08005db4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dbc:	2182      	movs	r1, #130	@ 0x82
 8005dbe:	4818      	ldr	r0, [pc, #96]	@ (8005e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dc0:	f000 fd0f 	bl	80067e2 <USBD_GetEpDesc>
 8005dc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4815      	ldr	r0, [pc, #84]	@ (8005e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dca:	f000 fd0a 	bl	80067e2 <USBD_GetEpDesc>
 8005dce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dd0:	2181      	movs	r1, #129	@ 0x81
 8005dd2:	4813      	ldr	r0, [pc, #76]	@ (8005e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dd4:	f000 fd05 	bl	80067e2 <USBD_GetEpDesc>
 8005dd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2210      	movs	r2, #16
 8005de4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d006      	beq.n	8005dfa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df4:	711a      	strb	r2, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e08:	711a      	strb	r2, [r3, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2243      	movs	r2, #67	@ 0x43
 8005e12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e14:	4b02      	ldr	r3, [pc, #8]	@ (8005e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000050 	.word	0x20000050

08005e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	220a      	movs	r2, #10
 8005e30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	@ (8005e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	2000000c 	.word	0x2000000c

08005e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e009      	b.n	8005e6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	33b0      	adds	r3, #176	@ 0xb0
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	32b0      	adds	r2, #176	@ 0xb0
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e008      	b.n	8005eb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	32b0      	adds	r2, #176	@ 0xb0
 8005ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e004      	b.n	8005eea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	32b0      	adds	r2, #176	@ 0xb0
 8005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e025      	b.n	8005f6a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11f      	bne.n	8005f68 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f30:	4b10      	ldr	r3, [pc, #64]	@ (8005f74 <USBD_CDC_TransmitPacket+0x7c>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4403      	add	r3, r0
 8005f4a:	3318      	adds	r3, #24
 8005f4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f4e:	4b09      	ldr	r3, [pc, #36]	@ (8005f74 <USBD_CDC_TransmitPacket+0x7c>)
 8005f50:	7819      	ldrb	r1, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f002 f86b 	bl	800803a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000093 	.word	0x20000093

08005f78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	32b0      	adds	r2, #176	@ 0xb0
 8005f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	32b0      	adds	r2, #176	@ 0xb0
 8005f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e018      	b.n	8005fd8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7c1b      	ldrb	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10a      	bne.n	8005fc4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fae:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <USBD_CDC_ReceivePacket+0x68>)
 8005fb0:	7819      	ldrb	r1, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f002 f85d 	bl	800807c <USBD_LL_PrepareReceive>
 8005fc2:	e008      	b.n	8005fd6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <USBD_CDC_ReceivePacket+0x68>)
 8005fc6:	7819      	ldrb	r1, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fce:	2340      	movs	r3, #64	@ 0x40
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f002 f853 	bl	800807c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000094 	.word	0x20000094

08005fe4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e01f      	b.n	800603c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	79fa      	ldrb	r2, [r7, #7]
 800602e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 fe97 	bl	8007d64 <USBD_LL_Init>
 8006036:	4603      	mov	r3, r0
 8006038:	75fb      	strb	r3, [r7, #23]

  return ret;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_DeInit>:
  *         De-Initialize the device library
  * @param  pdev: device instance
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 ff0b 	bl	8007e68 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6852      	ldr	r2, [r2, #4]
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	4611      	mov	r1, r2
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 feb3 	bl	8007dfc <USBD_LL_DeInit>
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]

  return ret;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e025      	b.n	8006108 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	32ae      	adds	r2, #174	@ 0xae
 80060ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00f      	beq.n	80060f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	32ae      	adds	r2, #174	@ 0xae
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e8:	f107 020e 	add.w	r2, r7, #14
 80060ec:	4610      	mov	r0, r2
 80060ee:	4798      	blx	r3
 80060f0:	4602      	mov	r2, r0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fe8a 	bl	8007e32 <USBD_LL_Start>
 800611e:	4603      	mov	r3, r0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	4611      	mov	r1, r2
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	460b      	mov	r3, r1
 8006180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4611      	mov	r1, r2
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f90c 	bl	80073da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d01a      	beq.n	800621c <USBD_LL_SetupStage+0x72>
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d822      	bhi.n	8006230 <USBD_LL_SetupStage+0x86>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <USBD_LL_SetupStage+0x4a>
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d00a      	beq.n	8006208 <USBD_LL_SetupStage+0x5e>
 80061f2:	e01d      	b.n	8006230 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fb63 	bl	80068c8 <USBD_StdDevReq>
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]
      break;
 8006206:	e020      	b.n	800624a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fbcb 	bl	80069ac <USBD_StdItfReq>
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
      break;
 800621a:	e016      	b.n	800624a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc2d 	bl	8006a84 <USBD_StdEPReq>
 800622a:	4603      	mov	r3, r0
 800622c:	73fb      	strb	r3, [r7, #15]
      break;
 800622e:	e00c      	b.n	800624a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006236:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fe72 	bl	8007f28 <USBD_LL_StallEP>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
      break;
 8006248:	bf00      	nop
  }

  return ret;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	460b      	mov	r3, r1
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006266:	7afb      	ldrb	r3, [r7, #11]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d16e      	bne.n	800634a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800627a:	2b03      	cmp	r3, #3
 800627c:	f040 8098 	bne.w	80063b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	429a      	cmp	r2, r3
 800628a:	d913      	bls.n	80062b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	1ad2      	subs	r2, r2, r3
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	bf28      	it	cs
 80062a6:	4613      	movcs	r3, r2
 80062a8:	461a      	mov	r2, r3
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f001 f994 	bl	80075da <USBD_CtlContinueRx>
 80062b2:	e07d      	b.n	80063b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d014      	beq.n	80062ec <USBD_LL_DataOutStage+0x98>
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d81d      	bhi.n	8006302 <USBD_LL_DataOutStage+0xae>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <USBD_LL_DataOutStage+0x7c>
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d003      	beq.n	80062d6 <USBD_LL_DataOutStage+0x82>
 80062ce:	e018      	b.n	8006302 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	75bb      	strb	r3, [r7, #22]
            break;
 80062d4:	e018      	b.n	8006308 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4619      	mov	r1, r3
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 fa64 	bl	80067ae <USBD_CoreFindIF>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75bb      	strb	r3, [r7, #22]
            break;
 80062ea:	e00d      	b.n	8006308 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	4619      	mov	r1, r3
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fa66 	bl	80067c8 <USBD_CoreFindEP>
 80062fc:	4603      	mov	r3, r0
 80062fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006300:	e002      	b.n	8006308 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	75bb      	strb	r3, [r7, #22]
            break;
 8006306:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006308:	7dbb      	ldrb	r3, [r7, #22]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d119      	bne.n	8006342 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b03      	cmp	r3, #3
 8006318:	d113      	bne.n	8006342 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800631a:	7dba      	ldrb	r2, [r7, #22]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	32ae      	adds	r2, #174	@ 0xae
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800632a:	7dba      	ldrb	r2, [r7, #22]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006332:	7dba      	ldrb	r2, [r7, #22]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	32ae      	adds	r2, #174	@ 0xae
 8006338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f001 f95a 	bl	80075fc <USBD_CtlSendStatus>
 8006348:	e032      	b.n	80063b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800634a:	7afb      	ldrb	r3, [r7, #11]
 800634c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006350:	b2db      	uxtb	r3, r3
 8006352:	4619      	mov	r1, r3
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fa37 	bl	80067c8 <USBD_CoreFindEP>
 800635a:	4603      	mov	r3, r0
 800635c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800635e:	7dbb      	ldrb	r3, [r7, #22]
 8006360:	2bff      	cmp	r3, #255	@ 0xff
 8006362:	d025      	beq.n	80063b0 <USBD_LL_DataOutStage+0x15c>
 8006364:	7dbb      	ldrb	r3, [r7, #22]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d122      	bne.n	80063b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b03      	cmp	r3, #3
 8006374:	d117      	bne.n	80063a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006376:	7dba      	ldrb	r2, [r7, #22]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	32ae      	adds	r2, #174	@ 0xae
 800637c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00f      	beq.n	80063a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006386:	7dba      	ldrb	r2, [r7, #22]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800638e:	7dba      	ldrb	r2, [r7, #22]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	32ae      	adds	r2, #174	@ 0xae
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	7afa      	ldrb	r2, [r7, #11]
 800639c:	4611      	mov	r1, r2
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	4798      	blx	r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	e000      	b.n	80063b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b086      	sub	sp, #24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	460b      	mov	r3, r1
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d16f      	bne.n	80064ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3314      	adds	r3, #20
 80063d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d15a      	bne.n	8006494 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d914      	bls.n	8006414 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f001 f8bc 	bl	800757e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006406:	2300      	movs	r3, #0
 8006408:	2200      	movs	r2, #0
 800640a:	2100      	movs	r1, #0
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f001 fe35 	bl	800807c <USBD_LL_PrepareReceive>
 8006412:	e03f      	b.n	8006494 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	d11c      	bne.n	800645a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006428:	429a      	cmp	r2, r3
 800642a:	d316      	bcc.n	800645a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006436:	429a      	cmp	r2, r3
 8006438:	d20f      	bcs.n	800645a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800643a:	2200      	movs	r2, #0
 800643c:	2100      	movs	r1, #0
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f001 f89d 	bl	800757e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800644c:	2300      	movs	r3, #0
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f001 fe12 	bl	800807c <USBD_LL_PrepareReceive>
 8006458:	e01c      	b.n	8006494 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b03      	cmp	r3, #3
 8006464:	d10f      	bne.n	8006486 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006486:	2180      	movs	r1, #128	@ 0x80
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f001 fd4d 	bl	8007f28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 f8c7 	bl	8007622 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d03a      	beq.n	8006514 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff fe42 	bl	8006128 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064ac:	e032      	b.n	8006514 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	4619      	mov	r1, r3
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f985 	bl	80067c8 <USBD_CoreFindEP>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2bff      	cmp	r3, #255	@ 0xff
 80064c6:	d025      	beq.n	8006514 <USBD_LL_DataInStage+0x15a>
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d122      	bne.n	8006514 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d11c      	bne.n	8006514 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80064da:	7dfa      	ldrb	r2, [r7, #23]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	32ae      	adds	r2, #174	@ 0xae
 80064e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d014      	beq.n	8006514 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80064ea:	7dfa      	ldrb	r2, [r7, #23]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80064f2:	7dfa      	ldrb	r2, [r7, #23]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	32ae      	adds	r2, #174	@ 0xae
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	7afa      	ldrb	r2, [r7, #11]
 8006500:	4611      	mov	r1, r2
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	4798      	blx	r3
 8006506:	4603      	mov	r3, r0
 8006508:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800650a:	7dbb      	ldrb	r3, [r7, #22]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006510:	7dbb      	ldrb	r3, [r7, #22]
 8006512:	e000      	b.n	8006516 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d014      	beq.n	8006584 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00e      	beq.n	8006584 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6852      	ldr	r2, [r2, #4]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	4611      	mov	r1, r2
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006580:	2303      	movs	r3, #3
 8006582:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006584:	2340      	movs	r3, #64	@ 0x40
 8006586:	2200      	movs	r2, #0
 8006588:	2100      	movs	r1, #0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fc87 	bl	8007e9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065a0:	2340      	movs	r3, #64	@ 0x40
 80065a2:	2200      	movs	r2, #0
 80065a4:	2180      	movs	r1, #128	@ 0x80
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fc79 	bl	8007e9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2240      	movs	r2, #64	@ 0x40
 80065b6:	621a      	str	r2, [r3, #32]

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d006      	beq.n	8006604 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2204      	movs	r2, #4
 8006608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b04      	cmp	r3, #4
 800662c:	d106      	bne.n	800663c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006634:	b2da      	uxtb	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d110      	bne.n	8006680 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	32ae      	adds	r2, #174	@ 0xae
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e01c      	b.n	80066e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d115      	bne.n	80066e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32ae      	adds	r2, #174	@ 0xae
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32ae      	adds	r2, #174	@ 0xae
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	4611      	mov	r1, r2
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	32ae      	adds	r2, #174	@ 0xae
 8006704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800670c:	2303      	movs	r3, #3
 800670e:	e01c      	b.n	800674a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b03      	cmp	r3, #3
 800671a:	d115      	bne.n	8006748 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32ae      	adds	r2, #174	@ 0xae
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	32ae      	adds	r2, #174	@ 0xae
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	4611      	mov	r1, r2
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6852      	ldr	r2, [r2, #4]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	4611      	mov	r1, r2
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	885b      	ldrh	r3, [r3, #2]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	4293      	cmp	r3, r2
 8006806:	d91f      	bls.n	8006848 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800680e:	e013      	b.n	8006838 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006810:	f107 030a 	add.w	r3, r7, #10
 8006814:	4619      	mov	r1, r3
 8006816:	6978      	ldr	r0, [r7, #20]
 8006818:	f000 f81b 	bl	8006852 <USBD_GetNextDesc>
 800681c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	2b05      	cmp	r3, #5
 8006824:	d108      	bne.n	8006838 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	789b      	ldrb	r3, [r3, #2]
 800682e:	78fa      	ldrb	r2, [r7, #3]
 8006830:	429a      	cmp	r2, r3
 8006832:	d008      	beq.n	8006846 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	885b      	ldrh	r3, [r3, #2]
 800683c:	b29a      	uxth	r2, r3
 800683e:	897b      	ldrh	r3, [r7, #10]
 8006840:	429a      	cmp	r2, r3
 8006842:	d8e5      	bhi.n	8006810 <USBD_GetEpDesc+0x2e>
 8006844:	e000      	b.n	8006848 <USBD_GetEpDesc+0x66>
          break;
 8006846:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006848:	693b      	ldr	r3, [r7, #16]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	4413      	add	r3, r2
 800686a:	b29a      	uxth	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3301      	adds	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068a8:	8a3b      	ldrh	r3, [r7, #16]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	b21a      	sxth	r2, r3
 80068ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068b8:	89fb      	ldrh	r3, [r7, #14]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	d005      	beq.n	80068ee <USBD_StdDevReq+0x26>
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d857      	bhi.n	8006996 <USBD_StdDevReq+0xce>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00f      	beq.n	800690a <USBD_StdDevReq+0x42>
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d153      	bne.n	8006996 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32ae      	adds	r2, #174	@ 0xae
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4798      	blx	r3
 8006904:	4603      	mov	r3, r0
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e04a      	b.n	80069a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b09      	cmp	r3, #9
 8006910:	d83b      	bhi.n	800698a <USBD_StdDevReq+0xc2>
 8006912:	a201      	add	r2, pc, #4	@ (adr r2, 8006918 <USBD_StdDevReq+0x50>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800696d 	.word	0x0800696d
 800691c:	08006981 	.word	0x08006981
 8006920:	0800698b 	.word	0x0800698b
 8006924:	08006977 	.word	0x08006977
 8006928:	0800698b 	.word	0x0800698b
 800692c:	0800694b 	.word	0x0800694b
 8006930:	08006941 	.word	0x08006941
 8006934:	0800698b 	.word	0x0800698b
 8006938:	08006963 	.word	0x08006963
 800693c:	08006955 	.word	0x08006955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa3c 	bl	8006dc0 <USBD_GetDescriptor>
          break;
 8006948:	e024      	b.n	8006994 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fba1 	bl	8007094 <USBD_SetAddress>
          break;
 8006952:	e01f      	b.n	8006994 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fbe0 	bl	800711c <USBD_SetConfig>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
          break;
 8006960:	e018      	b.n	8006994 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc83 	bl	8007270 <USBD_GetConfig>
          break;
 800696a:	e013      	b.n	8006994 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fcb4 	bl	80072dc <USBD_GetStatus>
          break;
 8006974:	e00e      	b.n	8006994 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fce3 	bl	8007344 <USBD_SetFeature>
          break;
 800697e:	e009      	b.n	8006994 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fd07 	bl	8007396 <USBD_ClrFeature>
          break;
 8006988:	e004      	b.n	8006994 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fd5e 	bl	800744e <USBD_CtlError>
          break;
 8006992:	bf00      	nop
      }
      break;
 8006994:	e004      	b.n	80069a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fd58 	bl	800744e <USBD_CtlError>
      break;
 800699e:	bf00      	nop
  }

  return ret;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop

080069ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	d005      	beq.n	80069d2 <USBD_StdItfReq+0x26>
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	d852      	bhi.n	8006a70 <USBD_StdItfReq+0xc4>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <USBD_StdItfReq+0x26>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d14e      	bne.n	8006a70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d840      	bhi.n	8006a62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	889b      	ldrh	r3, [r3, #4]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d836      	bhi.n	8006a58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	889b      	ldrh	r3, [r3, #4]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff fedb 	bl	80067ae <USBD_CoreFindIF>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	2bff      	cmp	r3, #255	@ 0xff
 8006a00:	d01d      	beq.n	8006a3e <USBD_StdItfReq+0x92>
 8006a02:	7bbb      	ldrb	r3, [r7, #14]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a08:	7bba      	ldrb	r2, [r7, #14]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32ae      	adds	r2, #174	@ 0xae
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00f      	beq.n	8006a38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a18:	7bba      	ldrb	r2, [r7, #14]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a20:	7bba      	ldrb	r2, [r7, #14]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	32ae      	adds	r2, #174	@ 0xae
 8006a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a36:	e004      	b.n	8006a42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a3c:	e001      	b.n	8006a42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	88db      	ldrh	r3, [r3, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d110      	bne.n	8006a6c <USBD_StdItfReq+0xc0>
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10d      	bne.n	8006a6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fdd3 	bl	80075fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a56:	e009      	b.n	8006a6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fcf7 	bl	800744e <USBD_CtlError>
          break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fcf2 	bl	800744e <USBD_CtlError>
          break;
 8006a6a:	e000      	b.n	8006a6e <USBD_StdItfReq+0xc2>
          break;
 8006a6c:	bf00      	nop
      }
      break;
 8006a6e:	e004      	b.n	8006a7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fceb 	bl	800744e <USBD_CtlError>
      break;
 8006a78:	bf00      	nop
  }

  return ret;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	889b      	ldrh	r3, [r3, #4]
 8006a96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006aa0:	2b40      	cmp	r3, #64	@ 0x40
 8006aa2:	d007      	beq.n	8006ab4 <USBD_StdEPReq+0x30>
 8006aa4:	2b40      	cmp	r3, #64	@ 0x40
 8006aa6:	f200 817f 	bhi.w	8006da8 <USBD_StdEPReq+0x324>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d02a      	beq.n	8006b04 <USBD_StdEPReq+0x80>
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	f040 817a 	bne.w	8006da8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff fe85 	bl	80067c8 <USBD_CoreFindEP>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ac2:	7b7b      	ldrb	r3, [r7, #13]
 8006ac4:	2bff      	cmp	r3, #255	@ 0xff
 8006ac6:	f000 8174 	beq.w	8006db2 <USBD_StdEPReq+0x32e>
 8006aca:	7b7b      	ldrb	r3, [r7, #13]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8170 	bne.w	8006db2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006ad2:	7b7a      	ldrb	r2, [r7, #13]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ada:	7b7a      	ldrb	r2, [r7, #13]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	32ae      	adds	r2, #174	@ 0xae
 8006ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8163 	beq.w	8006db2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006aec:	7b7a      	ldrb	r2, [r7, #13]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	32ae      	adds	r2, #174	@ 0xae
 8006af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
 8006afe:	4603      	mov	r3, r0
 8006b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b02:	e156      	b.n	8006db2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d008      	beq.n	8006b1e <USBD_StdEPReq+0x9a>
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	f300 8145 	bgt.w	8006d9c <USBD_StdEPReq+0x318>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 809b 	beq.w	8006c4e <USBD_StdEPReq+0x1ca>
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d03c      	beq.n	8006b96 <USBD_StdEPReq+0x112>
 8006b1c:	e13e      	b.n	8006d9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d002      	beq.n	8006b30 <USBD_StdEPReq+0xac>
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d016      	beq.n	8006b5c <USBD_StdEPReq+0xd8>
 8006b2e:	e02c      	b.n	8006b8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <USBD_StdEPReq+0xce>
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b80      	cmp	r3, #128	@ 0x80
 8006b3a:	d00a      	beq.n	8006b52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f9f1 	bl	8007f28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b46:	2180      	movs	r1, #128	@ 0x80
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 f9ed 	bl	8007f28 <USBD_LL_StallEP>
 8006b4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b50:	e020      	b.n	8006b94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fc7a 	bl	800744e <USBD_CtlError>
              break;
 8006b5a:	e01b      	b.n	8006b94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10e      	bne.n	8006b82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <USBD_StdEPReq+0xfe>
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b80      	cmp	r3, #128	@ 0x80
 8006b6e:	d008      	beq.n	8006b82 <USBD_StdEPReq+0xfe>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f9d3 	bl	8007f28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fd3a 	bl	80075fc <USBD_CtlSendStatus>

              break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc5e 	bl	800744e <USBD_CtlError>
              break;
 8006b92:	bf00      	nop
          }
          break;
 8006b94:	e107      	b.n	8006da6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d002      	beq.n	8006ba8 <USBD_StdEPReq+0x124>
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d016      	beq.n	8006bd4 <USBD_StdEPReq+0x150>
 8006ba6:	e04b      	b.n	8006c40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00d      	beq.n	8006bca <USBD_StdEPReq+0x146>
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b80      	cmp	r3, #128	@ 0x80
 8006bb2:	d00a      	beq.n	8006bca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f9b5 	bl	8007f28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bbe:	2180      	movs	r1, #128	@ 0x80
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f9b1 	bl	8007f28 <USBD_LL_StallEP>
 8006bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc8:	e040      	b.n	8006c4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fc3e 	bl	800744e <USBD_CtlError>
              break;
 8006bd2:	e03b      	b.n	8006c4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	885b      	ldrh	r3, [r3, #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d136      	bne.n	8006c4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d004      	beq.n	8006bf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 f9bb 	bl	8007f66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd03 	bl	80075fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fde4 	bl	80067c8 <USBD_CoreFindEP>
 8006c00:	4603      	mov	r3, r0
 8006c02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c04:	7b7b      	ldrb	r3, [r7, #13]
 8006c06:	2bff      	cmp	r3, #255	@ 0xff
 8006c08:	d01f      	beq.n	8006c4a <USBD_StdEPReq+0x1c6>
 8006c0a:	7b7b      	ldrb	r3, [r7, #13]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11c      	bne.n	8006c4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c10:	7b7a      	ldrb	r2, [r7, #13]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c18:	7b7a      	ldrb	r2, [r7, #13]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32ae      	adds	r2, #174	@ 0xae
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d010      	beq.n	8006c4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c28:	7b7a      	ldrb	r2, [r7, #13]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	@ 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c3e:	e004      	b.n	8006c4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fc03 	bl	800744e <USBD_CtlError>
              break;
 8006c48:	e000      	b.n	8006c4c <USBD_StdEPReq+0x1c8>
              break;
 8006c4a:	bf00      	nop
          }
          break;
 8006c4c:	e0ab      	b.n	8006da6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d002      	beq.n	8006c60 <USBD_StdEPReq+0x1dc>
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d032      	beq.n	8006cc4 <USBD_StdEPReq+0x240>
 8006c5e:	e097      	b.n	8006d90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <USBD_StdEPReq+0x1f2>
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	2b80      	cmp	r3, #128	@ 0x80
 8006c6a:	d004      	beq.n	8006c76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fbed 	bl	800744e <USBD_CtlError>
                break;
 8006c74:	e091      	b.n	8006d9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da0b      	bge.n	8006c96 <USBD_StdEPReq+0x212>
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	3304      	adds	r3, #4
 8006c94:	e00b      	b.n	8006cae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	3304      	adds	r3, #4
 8006cae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc43 	bl	8007548 <USBD_CtlSendData>
              break;
 8006cc2:	e06a      	b.n	8006d9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	da11      	bge.n	8006cf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	f003 020f 	and.w	r2, r3, #15
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	440b      	add	r3, r1
 8006cde:	3324      	adds	r3, #36	@ 0x24
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d117      	bne.n	8006d16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fbb0 	bl	800744e <USBD_CtlError>
                  break;
 8006cee:	e054      	b.n	8006d9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	f003 020f 	and.w	r2, r3, #15
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fb9d 	bl	800744e <USBD_CtlError>
                  break;
 8006d14:	e041      	b.n	8006d9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da0b      	bge.n	8006d36 <USBD_StdEPReq+0x2b2>
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	3310      	adds	r3, #16
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	3304      	adds	r3, #4
 8006d34:	e00b      	b.n	8006d4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <USBD_StdEPReq+0x2d8>
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b80      	cmp	r3, #128	@ 0x80
 8006d5a:	d103      	bne.n	8006d64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e00e      	b.n	8006d82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f91b 	bl	8007fa4 <USBD_LL_IsStallEP>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e002      	b.n	8006d82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2202      	movs	r2, #2
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fbdd 	bl	8007548 <USBD_CtlSendData>
              break;
 8006d8e:	e004      	b.n	8006d9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb5b 	bl	800744e <USBD_CtlError>
              break;
 8006d98:	bf00      	nop
          }
          break;
 8006d9a:	e004      	b.n	8006da6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fb55 	bl	800744e <USBD_CtlError>
          break;
 8006da4:	bf00      	nop
      }
      break;
 8006da6:	e005      	b.n	8006db4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fb4f 	bl	800744e <USBD_CtlError>
      break;
 8006db0:	e000      	b.n	8006db4 <USBD_StdEPReq+0x330>
      break;
 8006db2:	bf00      	nop
  }

  return ret;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b06      	cmp	r3, #6
 8006de2:	f200 8128 	bhi.w	8007036 <USBD_GetDescriptor+0x276>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <USBD_GetDescriptor+0x2c>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	08006e21 	.word	0x08006e21
 8006df4:	08006e61 	.word	0x08006e61
 8006df8:	08007037 	.word	0x08007037
 8006dfc:	08007037 	.word	0x08007037
 8006e00:	08006fd7 	.word	0x08006fd7
 8006e04:	08007003 	.word	0x08007003
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
      break;
 8006e1e:	e112      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7c1b      	ldrb	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e30:	f107 0208 	add.w	r2, r7, #8
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	2202      	movs	r2, #2
 8006e40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e42:	e100      	b.n	8007046 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	f107 0208 	add.w	r2, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	701a      	strb	r2, [r3, #0]
      break;
 8006e5e:	e0f2      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	f200 80ac 	bhi.w	8006fc4 <USBD_GetDescriptor+0x204>
 8006e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <USBD_GetDescriptor+0xb4>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006e8d 	.word	0x08006e8d
 8006e78:	08006ec1 	.word	0x08006ec1
 8006e7c:	08006ef5 	.word	0x08006ef5
 8006e80:	08006f29 	.word	0x08006f29
 8006e84:	08006f5d 	.word	0x08006f5d
 8006e88:	08006f91 	.word	0x08006f91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	7c12      	ldrb	r2, [r2, #16]
 8006ea4:	f107 0108 	add.w	r1, r7, #8
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	4798      	blx	r3
 8006eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eae:	e091      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 facb 	bl	800744e <USBD_CtlError>
            err++;
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ebe:	e089      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	7c12      	ldrb	r2, [r2, #16]
 8006ed8:	f107 0108 	add.w	r1, r7, #8
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
 8006ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ee2:	e077      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fab1 	bl	800744e <USBD_CtlError>
            err++;
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ef2:	e06f      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00b      	beq.n	8006f18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	7c12      	ldrb	r2, [r2, #16]
 8006f0c:	f107 0108 	add.w	r1, r7, #8
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
 8006f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f16:	e05d      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa97 	bl	800744e <USBD_CtlError>
            err++;
 8006f20:	7afb      	ldrb	r3, [r7, #11]
 8006f22:	3301      	adds	r3, #1
 8006f24:	72fb      	strb	r3, [r7, #11]
          break;
 8006f26:	e055      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7c12      	ldrb	r2, [r2, #16]
 8006f40:	f107 0108 	add.w	r1, r7, #8
 8006f44:	4610      	mov	r0, r2
 8006f46:	4798      	blx	r3
 8006f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f4a:	e043      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fa7d 	bl	800744e <USBD_CtlError>
            err++;
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	3301      	adds	r3, #1
 8006f58:	72fb      	strb	r3, [r7, #11]
          break;
 8006f5a:	e03b      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	7c12      	ldrb	r2, [r2, #16]
 8006f74:	f107 0108 	add.w	r1, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7e:	e029      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa63 	bl	800744e <USBD_CtlError>
            err++;
 8006f88:	7afb      	ldrb	r3, [r7, #11]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8e:	e021      	b.n	8006fd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00b      	beq.n	8006fb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	7c12      	ldrb	r2, [r2, #16]
 8006fa8:	f107 0108 	add.w	r1, r7, #8
 8006fac:	4610      	mov	r0, r2
 8006fae:	4798      	blx	r3
 8006fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fb2:	e00f      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa49 	bl	800744e <USBD_CtlError>
            err++;
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fc2:	e007      	b.n	8006fd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa41 	bl	800744e <USBD_CtlError>
          err++;
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006fd2:	bf00      	nop
      }
      break;
 8006fd4:	e037      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7c1b      	ldrb	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe6:	f107 0208 	add.w	r2, r7, #8
 8006fea:	4610      	mov	r0, r2
 8006fec:	4798      	blx	r3
 8006fee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ff0:	e029      	b.n	8007046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa2a 	bl	800744e <USBD_CtlError>
        err++;
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8007000:	e021      	b.n	8007046 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7c1b      	ldrb	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10d      	bne.n	8007026 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	f107 0208 	add.w	r2, r7, #8
 8007016:	4610      	mov	r0, r2
 8007018:	4798      	blx	r3
 800701a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	2207      	movs	r2, #7
 8007022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007024:	e00f      	b.n	8007046 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa10 	bl	800744e <USBD_CtlError>
        err++;
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	3301      	adds	r3, #1
 8007032:	72fb      	strb	r3, [r7, #11]
      break;
 8007034:	e007      	b.n	8007046 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa08 	bl	800744e <USBD_CtlError>
      err++;
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	3301      	adds	r3, #1
 8007042:	72fb      	strb	r3, [r7, #11]
      break;
 8007044:	bf00      	nop
  }

  if (err != 0U)
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11e      	bne.n	800708a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	88db      	ldrh	r3, [r3, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d016      	beq.n	8007082 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007054:	893b      	ldrh	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88da      	ldrh	r2, [r3, #6]
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	4293      	cmp	r3, r2
 8007062:	bf28      	it	cs
 8007064:	4613      	movcs	r3, r2
 8007066:	b29b      	uxth	r3, r3
 8007068:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	461a      	mov	r2, r3
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fa69 	bl	8007548 <USBD_CtlSendData>
 8007076:	e009      	b.n	800708c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9e7 	bl	800744e <USBD_CtlError>
 8007080:	e004      	b.n	800708c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 faba 	bl	80075fc <USBD_CtlSendStatus>
 8007088:	e000      	b.n	800708c <USBD_GetDescriptor+0x2cc>
    return;
 800708a:	bf00      	nop
  }
}
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	889b      	ldrh	r3, [r3, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d131      	bne.n	800710a <USBD_SetAddress+0x76>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d12d      	bne.n	800710a <USBD_SetAddress+0x76>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	885b      	ldrh	r3, [r3, #2]
 80070b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80070b4:	d829      	bhi.n	800710a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d104      	bne.n	80070d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9bc 	bl	800744e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d6:	e01d      	b.n	8007114 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	7bfa      	ldrb	r2, [r7, #15]
 80070dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 ff89 	bl	8007ffc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa86 	bl	80075fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	e009      	b.n	8007114 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	e004      	b.n	8007114 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f99e 	bl	800744e <USBD_CtlError>
  }
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	4b4e      	ldr	r3, [pc, #312]	@ (800726c <USBD_SetConfig+0x150>)
 8007132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007134:	4b4d      	ldr	r3, [pc, #308]	@ (800726c <USBD_SetConfig+0x150>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d905      	bls.n	8007148 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f985 	bl	800744e <USBD_CtlError>
    return USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	e08c      	b.n	8007262 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d002      	beq.n	800715a <USBD_SetConfig+0x3e>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d029      	beq.n	80071ac <USBD_SetConfig+0x90>
 8007158:	e075      	b.n	8007246 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800715a:	4b44      	ldr	r3, [pc, #272]	@ (800726c <USBD_SetConfig+0x150>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d020      	beq.n	80071a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007162:	4b42      	ldr	r3, [pc, #264]	@ (800726c <USBD_SetConfig+0x150>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800716c:	4b3f      	ldr	r3, [pc, #252]	@ (800726c <USBD_SetConfig+0x150>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fe ffe3 	bl	800613e <USBD_SetClassConfig>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f962 	bl	800744e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007192:	e065      	b.n	8007260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa31 	bl	80075fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2203      	movs	r2, #3
 800719e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071a2:	e05d      	b.n	8007260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fa29 	bl	80075fc <USBD_CtlSendStatus>
      break;
 80071aa:	e059      	b.n	8007260 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071ac:	4b2f      	ldr	r3, [pc, #188]	@ (800726c <USBD_SetConfig+0x150>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d112      	bne.n	80071da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80071bc:	4b2b      	ldr	r3, [pc, #172]	@ (800726c <USBD_SetConfig+0x150>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071c6:	4b29      	ldr	r3, [pc, #164]	@ (800726c <USBD_SetConfig+0x150>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fe ffd2 	bl	8006176 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa12 	bl	80075fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071d8:	e042      	b.n	8007260 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <USBD_SetConfig+0x150>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d02a      	beq.n	800723e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7fe ffc0 	bl	8006176 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80071f6:	4b1d      	ldr	r3, [pc, #116]	@ (800726c <USBD_SetConfig+0x150>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007200:	4b1a      	ldr	r3, [pc, #104]	@ (800726c <USBD_SetConfig+0x150>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fe ff99 	bl	800613e <USBD_SetClassConfig>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00f      	beq.n	8007236 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f918 	bl	800744e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fe ffa5 	bl	8006176 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007234:	e014      	b.n	8007260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9e0 	bl	80075fc <USBD_CtlSendStatus>
      break;
 800723c:	e010      	b.n	8007260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f9dc 	bl	80075fc <USBD_CtlSendStatus>
      break;
 8007244:	e00c      	b.n	8007260 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f900 	bl	800744e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800724e:	4b07      	ldr	r3, [pc, #28]	@ (800726c <USBD_SetConfig+0x150>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fe ff8e 	bl	8006176 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	73fb      	strb	r3, [r7, #15]
      break;
 800725e:	bf00      	nop
  }

  return ret;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000608 	.word	0x20000608

08007270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	88db      	ldrh	r3, [r3, #6]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d004      	beq.n	800728c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f8e2 	bl	800744e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800728a:	e023      	b.n	80072d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	dc02      	bgt.n	800729e <USBD_GetConfig+0x2e>
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc03      	bgt.n	80072a4 <USBD_GetConfig+0x34>
 800729c:	e015      	b.n	80072ca <USBD_GetConfig+0x5a>
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d00b      	beq.n	80072ba <USBD_GetConfig+0x4a>
 80072a2:	e012      	b.n	80072ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3308      	adds	r3, #8
 80072ae:	2201      	movs	r2, #1
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f948 	bl	8007548 <USBD_CtlSendData>
        break;
 80072b8:	e00c      	b.n	80072d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3304      	adds	r3, #4
 80072be:	2201      	movs	r2, #1
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f940 	bl	8007548 <USBD_CtlSendData>
        break;
 80072c8:	e004      	b.n	80072d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f8be 	bl	800744e <USBD_CtlError>
        break;
 80072d2:	bf00      	nop
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d81e      	bhi.n	8007332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	88db      	ldrh	r3, [r3, #6]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d004      	beq.n	8007306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f8a5 	bl	800744e <USBD_CtlError>
        break;
 8007304:	e01a      	b.n	800733c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f043 0202 	orr.w	r2, r3, #2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	330c      	adds	r3, #12
 8007326:	2202      	movs	r2, #2
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f90c 	bl	8007548 <USBD_CtlSendData>
      break;
 8007330:	e004      	b.n	800733c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f88a 	bl	800744e <USBD_CtlError>
      break;
 800733a:	bf00      	nop
  }
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d107      	bne.n	8007366 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f94c 	bl	80075fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007364:	e013      	b.n	800738e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d10b      	bne.n	8007386 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	889b      	ldrh	r3, [r3, #4]
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	b29b      	uxth	r3, r3
 8007376:	b2da      	uxtb	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f93c 	bl	80075fc <USBD_CtlSendStatus>
}
 8007384:	e003      	b.n	800738e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f860 	bl	800744e <USBD_CtlError>
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d80b      	bhi.n	80073c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	885b      	ldrh	r3, [r3, #2]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d10c      	bne.n	80073d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f91c 	bl	80075fc <USBD_CtlSendStatus>
      }
      break;
 80073c4:	e004      	b.n	80073d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f840 	bl	800744e <USBD_CtlError>
      break;
 80073ce:	e000      	b.n	80073d2 <USBD_ClrFeature+0x3c>
      break;
 80073d0:	bf00      	nop
  }
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3301      	adds	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fa40 	bl	800688a <SWAPBYTE>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7ff fa33 	bl	800688a <SWAPBYTE>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fa26 	bl	800688a <SWAPBYTE>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	80da      	strh	r2, [r3, #6]
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007458:	2180      	movs	r1, #128	@ 0x80
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fd64 	bl	8007f28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fd60 	bl	8007f28 <USBD_LL_StallEP>
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d042      	beq.n	800750c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800748a:	6938      	ldr	r0, [r7, #16]
 800748c:	f000 f842 	bl	8007514 <USBD_GetLen>
 8007490:	4603      	mov	r3, r0
 8007492:	3301      	adds	r3, #1
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800749a:	d808      	bhi.n	80074ae <USBD_GetString+0x3e>
 800749c:	6938      	ldr	r0, [r7, #16]
 800749e:	f000 f839 	bl	8007514 <USBD_GetLen>
 80074a2:	4603      	mov	r3, r0
 80074a4:	3301      	adds	r3, #1
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	e001      	b.n	80074b2 <USBD_GetString+0x42>
 80074ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	4413      	add	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	7812      	ldrb	r2, [r2, #0]
 80074c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	3301      	adds	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	2203      	movs	r2, #3
 80074d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	3301      	adds	r3, #1
 80074d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074d8:	e013      	b.n	8007502 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	4413      	add	r3, r2
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
    idx++;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	3301      	adds	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	3301      	adds	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e7      	bne.n	80074da <USBD_GetString+0x6a>
 800750a:	e000      	b.n	800750e <USBD_GetString+0x9e>
    return;
 800750c:	bf00      	nop
  }
}
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007524:	e005      	b.n	8007532 <USBD_GetLen+0x1e>
  {
    len++;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	3301      	adds	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	3301      	adds	r3, #1
 8007530:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f5      	bne.n	8007526 <USBD_GetLen+0x12>
  }

  return len;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2202      	movs	r2, #2
 8007558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	2100      	movs	r1, #0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fd63 	bl	800803a <USBD_LL_Transmit>

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fd52 	bl	800803a <USBD_LL_Transmit>

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2203      	movs	r2, #3
 80075b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	2100      	movs	r1, #0
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fd56 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 fd45 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800760c:	2300      	movs	r3, #0
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fd11 	bl	800803a <USBD_LL_Transmit>

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2205      	movs	r2, #5
 800762e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fd1f 	bl	800807c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800764c:	2200      	movs	r2, #0
 800764e:	4912      	ldr	r1, [pc, #72]	@ (8007698 <MX_USB_DEVICE_Init+0x50>)
 8007650:	4812      	ldr	r0, [pc, #72]	@ (800769c <MX_USB_DEVICE_Init+0x54>)
 8007652:	f7fe fcc7 	bl	8005fe4 <USBD_Init>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800765c:	f7f9 fb74 	bl	8000d48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007660:	490f      	ldr	r1, [pc, #60]	@ (80076a0 <MX_USB_DEVICE_Init+0x58>)
 8007662:	480e      	ldr	r0, [pc, #56]	@ (800769c <MX_USB_DEVICE_Init+0x54>)
 8007664:	f7fe fd1e 	bl	80060a4 <USBD_RegisterClass>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800766e:	f7f9 fb6b 	bl	8000d48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007672:	490c      	ldr	r1, [pc, #48]	@ (80076a4 <MX_USB_DEVICE_Init+0x5c>)
 8007674:	4809      	ldr	r0, [pc, #36]	@ (800769c <MX_USB_DEVICE_Init+0x54>)
 8007676:	f7fe fbe5 	bl	8005e44 <USBD_CDC_RegisterInterface>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007680:	f7f9 fb62 	bl	8000d48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007684:	4805      	ldr	r0, [pc, #20]	@ (800769c <MX_USB_DEVICE_Init+0x54>)
 8007686:	f7fe fd43 	bl	8006110 <USBD_Start>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007690:	f7f9 fb5a 	bl	8000d48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007694:	bf00      	nop
 8007696:	bd80      	pop	{r7, pc}
 8007698:	200000ac 	.word	0x200000ac
 800769c:	2000060c 	.word	0x2000060c
 80076a0:	20000018 	.word	0x20000018
 80076a4:	20000098 	.word	0x20000098

080076a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076ac:	2200      	movs	r2, #0
 80076ae:	4905      	ldr	r1, [pc, #20]	@ (80076c4 <CDC_Init_FS+0x1c>)
 80076b0:	4805      	ldr	r0, [pc, #20]	@ (80076c8 <CDC_Init_FS+0x20>)
 80076b2:	f7fe fbe1 	bl	8005e78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076b6:	4905      	ldr	r1, [pc, #20]	@ (80076cc <CDC_Init_FS+0x24>)
 80076b8:	4803      	ldr	r0, [pc, #12]	@ (80076c8 <CDC_Init_FS+0x20>)
 80076ba:	f7fe fbff 	bl	8005ebc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	200010e8 	.word	0x200010e8
 80076c8:	2000060c 	.word	0x2000060c
 80076cc:	200008e8 	.word	0x200008e8

080076d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	6039      	str	r1, [r7, #0]
 80076ea:	71fb      	strb	r3, [r7, #7]
 80076ec:	4613      	mov	r3, r2
 80076ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	2b23      	cmp	r3, #35	@ 0x23
 80076f4:	d84a      	bhi.n	800778c <CDC_Control_FS+0xac>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <CDC_Control_FS+0x1c>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800778d 	.word	0x0800778d
 8007700:	0800778d 	.word	0x0800778d
 8007704:	0800778d 	.word	0x0800778d
 8007708:	0800778d 	.word	0x0800778d
 800770c:	0800778d 	.word	0x0800778d
 8007710:	0800778d 	.word	0x0800778d
 8007714:	0800778d 	.word	0x0800778d
 8007718:	0800778d 	.word	0x0800778d
 800771c:	0800778d 	.word	0x0800778d
 8007720:	0800778d 	.word	0x0800778d
 8007724:	0800778d 	.word	0x0800778d
 8007728:	0800778d 	.word	0x0800778d
 800772c:	0800778d 	.word	0x0800778d
 8007730:	0800778d 	.word	0x0800778d
 8007734:	0800778d 	.word	0x0800778d
 8007738:	0800778d 	.word	0x0800778d
 800773c:	0800778d 	.word	0x0800778d
 8007740:	0800778d 	.word	0x0800778d
 8007744:	0800778d 	.word	0x0800778d
 8007748:	0800778d 	.word	0x0800778d
 800774c:	0800778d 	.word	0x0800778d
 8007750:	0800778d 	.word	0x0800778d
 8007754:	0800778d 	.word	0x0800778d
 8007758:	0800778d 	.word	0x0800778d
 800775c:	0800778d 	.word	0x0800778d
 8007760:	0800778d 	.word	0x0800778d
 8007764:	0800778d 	.word	0x0800778d
 8007768:	0800778d 	.word	0x0800778d
 800776c:	0800778d 	.word	0x0800778d
 8007770:	0800778d 	.word	0x0800778d
 8007774:	0800778d 	.word	0x0800778d
 8007778:	0800778d 	.word	0x0800778d
 800777c:	0800778d 	.word	0x0800778d
 8007780:	0800778d 	.word	0x0800778d
 8007784:	0800778d 	.word	0x0800778d
 8007788:	0800778d 	.word	0x0800778d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800778c:	bf00      	nop
  }

  return (USBD_OK);
 800778e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	4813      	ldr	r0, [pc, #76]	@ (80077f8 <CDC_Receive_FS+0x5c>)
 80077aa:	f7fe fb87 	bl	8005ebc <USBD_CDC_SetRxBuffer>

  memset (rx_buffer, '\0', 1050);  // clear the buffer
 80077ae:	f240 421a 	movw	r2, #1050	@ 0x41a
 80077b2:	2100      	movs	r1, #0
 80077b4:	4811      	ldr	r0, [pc, #68]	@ (80077fc <CDC_Receive_FS+0x60>)
 80077b6:	f000 fee3 	bl	8008580 <memset>
  len = (uint8_t)*Len;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <CDC_Receive_FS+0x64>)
 80077c2:	701a      	strb	r2, [r3, #0]
//  for (int i = 0;i<len;i++)
//  		printf("%u ",*(Buf+i));
//  printf("%d \n",len);
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 80077c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <CDC_Receive_FS+0x64>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	480b      	ldr	r0, [pc, #44]	@ (80077fc <CDC_Receive_FS+0x60>)
 80077ce:	f000 ff52 	bl	8008676 <memcpy>
  flag = 1;
 80077d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <CDC_Receive_FS+0x68>)
 80077d4:	2201      	movs	r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
  memset(Buf, '\0', len);   // clear the Buf also
 80077d8:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <CDC_Receive_FS+0x64>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	2100      	movs	r1, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fecd 	bl	8008580 <memset>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077e6:	4804      	ldr	r0, [pc, #16]	@ (80077f8 <CDC_Receive_FS+0x5c>)
 80077e8:	f7fe fbc6 	bl	8005f78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80077ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2000060c 	.word	0x2000060c
 80077fc:	200001bc 	.word	0x200001bc
 8007800:	200005dc 	.word	0x200005dc
 8007804:	200005d8 	.word	0x200005d8

08007808 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007818:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <CDC_Transmit_FS+0x48>)
 800781a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800781e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800782a:	2301      	movs	r3, #1
 800782c:	e00b      	b.n	8007846 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	461a      	mov	r2, r3
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	4806      	ldr	r0, [pc, #24]	@ (8007850 <CDC_Transmit_FS+0x48>)
 8007836:	f7fe fb1f 	bl	8005e78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800783a:	4805      	ldr	r0, [pc, #20]	@ (8007850 <CDC_Transmit_FS+0x48>)
 800783c:	f7fe fb5c 	bl	8005ef8 <USBD_CDC_TransmitPacket>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000060c 	.word	0x2000060c

08007854 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800786a:	4618      	mov	r0, r3
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2212      	movs	r2, #18
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	@ (8007898 <USBD_FS_DeviceDescriptor+0x20>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	200000c8 	.word	0x200000c8

0800789c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2204      	movs	r2, #4
 80078ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078ae:	4b03      	ldr	r3, [pc, #12]	@ (80078bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	200000dc 	.word	0x200000dc

080078c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d105      	bne.n	80078de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4907      	ldr	r1, [pc, #28]	@ (80078f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d6:	4808      	ldr	r0, [pc, #32]	@ (80078f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d8:	f7ff fdca 	bl	8007470 <USBD_GetString>
 80078dc:	e004      	b.n	80078e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	4904      	ldr	r1, [pc, #16]	@ (80078f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078e2:	4805      	ldr	r0, [pc, #20]	@ (80078f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e4:	f7ff fdc4 	bl	8007470 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e8:	4b02      	ldr	r3, [pc, #8]	@ (80078f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200018e8 	.word	0x200018e8
 80078f8:	0800930c 	.word	0x0800930c

080078fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	4904      	ldr	r1, [pc, #16]	@ (800791c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800790c:	4804      	ldr	r0, [pc, #16]	@ (8007920 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800790e:	f7ff fdaf 	bl	8007470 <USBD_GetString>
  return USBD_StrDesc;
 8007912:	4b02      	ldr	r3, [pc, #8]	@ (800791c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200018e8 	.word	0x200018e8
 8007920:	08009324 	.word	0x08009324

08007924 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	221a      	movs	r2, #26
 8007934:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007936:	f000 f843 	bl	80079c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800793a:	4b02      	ldr	r3, [pc, #8]	@ (8007944 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200000e0 	.word	0x200000e0

08007948 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4907      	ldr	r1, [pc, #28]	@ (800797c <USBD_FS_ConfigStrDescriptor+0x34>)
 800795e:	4808      	ldr	r0, [pc, #32]	@ (8007980 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007960:	f7ff fd86 	bl	8007470 <USBD_GetString>
 8007964:	e004      	b.n	8007970 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	4904      	ldr	r1, [pc, #16]	@ (800797c <USBD_FS_ConfigStrDescriptor+0x34>)
 800796a:	4805      	ldr	r0, [pc, #20]	@ (8007980 <USBD_FS_ConfigStrDescriptor+0x38>)
 800796c:	f7ff fd80 	bl	8007470 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007970:	4b02      	ldr	r3, [pc, #8]	@ (800797c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200018e8 	.word	0x200018e8
 8007980:	08009338 	.word	0x08009338

08007984 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4907      	ldr	r1, [pc, #28]	@ (80079b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799a:	4808      	ldr	r0, [pc, #32]	@ (80079bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800799c:	f7ff fd68 	bl	8007470 <USBD_GetString>
 80079a0:	e004      	b.n	80079ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	4904      	ldr	r1, [pc, #16]	@ (80079b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079a6:	4805      	ldr	r0, [pc, #20]	@ (80079bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a8:	f7ff fd62 	bl	8007470 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079ac:	4b02      	ldr	r3, [pc, #8]	@ (80079b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	200018e8 	.word	0x200018e8
 80079bc:	08009344 	.word	0x08009344

080079c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a04 <Get_SerialNum+0x44>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <Get_SerialNum+0x48>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079d2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a0c <Get_SerialNum+0x4c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079e6:	2208      	movs	r2, #8
 80079e8:	4909      	ldr	r1, [pc, #36]	@ (8007a10 <Get_SerialNum+0x50>)
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f814 	bl	8007a18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079f0:	2204      	movs	r2, #4
 80079f2:	4908      	ldr	r1, [pc, #32]	@ (8007a14 <Get_SerialNum+0x54>)
 80079f4:	68b8      	ldr	r0, [r7, #8]
 80079f6:	f000 f80f 	bl	8007a18 <IntToUnicode>
  }
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	1fff7a10 	.word	0x1fff7a10
 8007a08:	1fff7a14 	.word	0x1fff7a14
 8007a0c:	1fff7a18 	.word	0x1fff7a18
 8007a10:	200000e2 	.word	0x200000e2
 8007a14:	200000f2 	.word	0x200000f2

08007a18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75fb      	strb	r3, [r7, #23]
 8007a2e:	e027      	b.n	8007a80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	0f1b      	lsrs	r3, r3, #28
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d80b      	bhi.n	8007a50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	0f1b      	lsrs	r3, r3, #28
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	4619      	mov	r1, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	440b      	add	r3, r1
 8007a48:	3230      	adds	r2, #48	@ 0x30
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	e00a      	b.n	8007a66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	0f1b      	lsrs	r3, r3, #28
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	440b      	add	r3, r1
 8007a60:	3237      	adds	r2, #55	@ 0x37
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	011b      	lsls	r3, r3, #4
 8007a6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	3301      	adds	r3, #1
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4413      	add	r3, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
 8007a80:	7dfa      	ldrb	r2, [r7, #23]
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d3d3      	bcc.n	8007a30 <IntToUnicode+0x18>
  }
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	@ 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	609a      	str	r2, [r3, #8]
 8007aac:	60da      	str	r2, [r3, #12]
 8007aae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ab8:	d13a      	bne.n	8007b30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aca:	4b1b      	ldr	r3, [pc, #108]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ad6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007adc:	2302      	movs	r3, #2
 8007ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ae8:	230a      	movs	r3, #10
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4619      	mov	r1, r3
 8007af2:	4812      	ldr	r0, [pc, #72]	@ (8007b3c <HAL_PCD_MspInit+0xa4>)
 8007af4:	f7f9 ff56 	bl	80019a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007af8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afc:	4a0e      	ldr	r2, [pc, #56]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b02:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	4b0b      	ldr	r3, [pc, #44]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b12:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b14:	4b08      	ldr	r3, [pc, #32]	@ (8007b38 <HAL_PCD_MspInit+0xa0>)
 8007b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	2043      	movs	r0, #67	@ 0x43
 8007b26:	f7f9 fc1c 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b2a:	2043      	movs	r0, #67	@ 0x43
 8007b2c:	f7f9 fc35 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b30:	bf00      	nop
 8007b32:	3728      	adds	r7, #40	@ 0x28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	40020000 	.word	0x40020000

08007b40 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b50:	d10d      	bne.n	8007b6e <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8007b52:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <HAL_PCD_MspDeInit+0x38>)
 8007b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b56:	4a08      	ldr	r2, [pc, #32]	@ (8007b78 <HAL_PCD_MspDeInit+0x38>)
 8007b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5c:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8007b5e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007b62:	4806      	ldr	r0, [pc, #24]	@ (8007b7c <HAL_PCD_MspDeInit+0x3c>)
 8007b64:	f7fa f8ba 	bl	8001cdc <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8007b68:	2043      	movs	r0, #67	@ 0x43
 8007b6a:	f7f9 fc24 	bl	80013b6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	40020000 	.word	0x40020000

08007b80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fb07 	bl	80061aa <USBD_LL_SetupStage>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7fe fb41 	bl	8006254 <USBD_LL_DataOutStage>
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	3320      	adds	r3, #32
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	4619      	mov	r1, r3
 8007c02:	f7fe fbda 	bl	80063ba <USBD_LL_DataInStage>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fd14 	bl	800664a <USBD_LL_SOF>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c32:	2301      	movs	r3, #1
 8007c34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	79db      	ldrb	r3, [r3, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
 8007c42:	e008      	b.n	8007c56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	79db      	ldrb	r3, [r3, #7]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d102      	bne.n	8007c52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
 8007c50:	e001      	b.n	8007c56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c52:	f7f9 f879 	bl	8000d48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c5c:	7bfa      	ldrb	r2, [r7, #15]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fcae 	bl	80065c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fc56 	bl	800651e <USBD_LL_Reset>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fca9 	bl	80065e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7adb      	ldrb	r3, [r3, #11]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cb0:	4b04      	ldr	r3, [pc, #16]	@ (8007cc4 <HAL_PCD_SuspendCallback+0x48>)
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	4a03      	ldr	r2, [pc, #12]	@ (8007cc4 <HAL_PCD_SuspendCallback+0x48>)
 8007cb6:	f043 0306 	orr.w	r3, r3, #6
 8007cba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	e000ed00 	.word	0xe000ed00

08007cc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fc9f 	bl	800661a <USBD_LL_Resume>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fcf7 	bl	80066ee <USBD_LL_IsoOUTIncomplete>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fcb3 	bl	800668a <USBD_LL_IsoINIncomplete>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fd09 	bl	8006752 <USBD_LL_DevConnected>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fd06 	bl	8006768 <USBD_LL_DevDisconnected>
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d13c      	bne.n	8007dee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d74:	4a20      	ldr	r2, [pc, #128]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007d80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d84:	4b1c      	ldr	r3, [pc, #112]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007d86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007d8e:	2204      	movs	r2, #4
 8007d90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d92:	4b19      	ldr	r3, [pc, #100]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007d94:	2202      	movs	r2, #2
 8007d96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d98:	4b17      	ldr	r3, [pc, #92]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d9e:	4b16      	ldr	r3, [pc, #88]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007da0:	2202      	movs	r2, #2
 8007da2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007da4:	4b14      	ldr	r3, [pc, #80]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007daa:	4b13      	ldr	r3, [pc, #76]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007db0:	4b11      	ldr	r3, [pc, #68]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007db6:	4b10      	ldr	r3, [pc, #64]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dc2:	480d      	ldr	r0, [pc, #52]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007dc4:	f7fa f8b7 	bl	8001f36 <HAL_PCD_Init>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dce:	f7f8 ffbb 	bl	8000d48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dd2:	2180      	movs	r1, #128	@ 0x80
 8007dd4:	4808      	ldr	r0, [pc, #32]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007dd6:	f7fb fb42 	bl	800345e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dda:	2240      	movs	r2, #64	@ 0x40
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4806      	ldr	r0, [pc, #24]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007de0:	f7fb faf6 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007de4:	2280      	movs	r2, #128	@ 0x80
 8007de6:	2101      	movs	r1, #1
 8007de8:	4803      	ldr	r0, [pc, #12]	@ (8007df8 <USBD_LL_Init+0x94>)
 8007dea:	f7fb faf1 	bl	80033d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20001ae8 	.word	0x20001ae8

08007dfc <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fa f99e 	bl	8002154 <HAL_PCD_DeInit>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 f978 	bl	8008114 <USBD_Get_USB_Status>
 8007e24:	4603      	mov	r3, r0
 8007e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b084      	sub	sp, #16
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fa f9a6 	bl	800219a <HAL_PCD_Start>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f95d 	bl	8008114 <USBD_Get_USB_Status>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fa f9c0 	bl	8002204 <HAL_PCD_Stop>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f942 	bl	8008114 <USBD_Get_USB_Status>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	70fb      	strb	r3, [r7, #3]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70bb      	strb	r3, [r7, #2]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ec6:	78bb      	ldrb	r3, [r7, #2]
 8007ec8:	883a      	ldrh	r2, [r7, #0]
 8007eca:	78f9      	ldrb	r1, [r7, #3]
 8007ecc:	f7fa fe9a 	bl	8002c04 <HAL_PCD_EP_Open>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f91c 	bl	8008114 <USBD_Get_USB_Status>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fa fee5 	bl	8002cd8 <HAL_PCD_EP_Close>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 f8fd 	bl	8008114 <USBD_Get_USB_Status>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f42:	78fa      	ldrb	r2, [r7, #3]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fa ff9d 	bl	8002e86 <HAL_PCD_EP_SetStall>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f8de 	bl	8008114 <USBD_Get_USB_Status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	4611      	mov	r1, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fa ffe1 	bl	8002f4c <HAL_PCD_EP_ClrStall>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f8bf 	bl	8008114 <USBD_Get_USB_Status>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	da0b      	bge.n	8007fd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	3316      	adds	r3, #22
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	e00b      	b.n	8007ff0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007fee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	4611      	mov	r1, r2
 800801a:	4618      	mov	r0, r3
 800801c:	f7fa fdce 	bl	8002bbc <HAL_PCD_SetAddress>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f874 	bl	8008114 <USBD_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	460b      	mov	r3, r1
 8008048:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008058:	7af9      	ldrb	r1, [r7, #11]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	f7fa fed8 	bl	8002e12 <HAL_PCD_EP_Transmit>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f853 	bl	8008114 <USBD_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008072:	7dbb      	ldrb	r3, [r7, #22]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	460b      	mov	r3, r1
 800808a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800809a:	7af9      	ldrb	r1, [r7, #11]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	f7fa fe64 	bl	8002d6c <HAL_PCD_EP_Receive>
 80080a4:	4603      	mov	r3, r0
 80080a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f832 	bl	8008114 <USBD_Get_USB_Status>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fa fe84 	bl	8002de2 <HAL_PCD_EP_GetRxCount>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080ec:	4b03      	ldr	r3, [pc, #12]	@ (80080fc <USBD_static_malloc+0x18>)
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20001fcc 	.word	0x20001fcc

08008100 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d817      	bhi.n	8008158 <USBD_Get_USB_Status+0x44>
 8008128:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <USBD_Get_USB_Status+0x1c>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008141 	.word	0x08008141
 8008134:	08008147 	.word	0x08008147
 8008138:	0800814d 	.word	0x0800814d
 800813c:	08008153 	.word	0x08008153
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
    break;
 8008144:	e00b      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008146:	2303      	movs	r3, #3
 8008148:	73fb      	strb	r3, [r7, #15]
    break;
 800814a:	e008      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800814c:	2301      	movs	r3, #1
 800814e:	73fb      	strb	r3, [r7, #15]
    break;
 8008150:	e005      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
    break;
 8008156:	e002      	b.n	800815e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	73fb      	strb	r3, [r7, #15]
    break;
 800815c:	bf00      	nop
  }
  return usb_status;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <std>:
 800816c:	2300      	movs	r3, #0
 800816e:	b510      	push	{r4, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	e9c0 3300 	strd	r3, r3, [r0]
 8008176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800817a:	6083      	str	r3, [r0, #8]
 800817c:	8181      	strh	r1, [r0, #12]
 800817e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008180:	81c2      	strh	r2, [r0, #14]
 8008182:	6183      	str	r3, [r0, #24]
 8008184:	4619      	mov	r1, r3
 8008186:	2208      	movs	r2, #8
 8008188:	305c      	adds	r0, #92	@ 0x5c
 800818a:	f000 f9f9 	bl	8008580 <memset>
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <std+0x58>)
 8008190:	6263      	str	r3, [r4, #36]	@ 0x24
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <std+0x5c>)
 8008194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <std+0x60>)
 8008198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x64>)
 800819c:	6323      	str	r3, [r4, #48]	@ 0x30
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <std+0x68>)
 80081a0:	6224      	str	r4, [r4, #32]
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d006      	beq.n	80081b4 <std+0x48>
 80081a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081aa:	4294      	cmp	r4, r2
 80081ac:	d002      	beq.n	80081b4 <std+0x48>
 80081ae:	33d0      	adds	r3, #208	@ 0xd0
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d105      	bne.n	80081c0 <std+0x54>
 80081b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	f000 ba58 	b.w	8008670 <__retarget_lock_init_recursive>
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	080083d1 	.word	0x080083d1
 80081c8:	080083f3 	.word	0x080083f3
 80081cc:	0800842b 	.word	0x0800842b
 80081d0:	0800844f 	.word	0x0800844f
 80081d4:	200021ec 	.word	0x200021ec

080081d8 <stdio_exit_handler>:
 80081d8:	4a02      	ldr	r2, [pc, #8]	@ (80081e4 <stdio_exit_handler+0xc>)
 80081da:	4903      	ldr	r1, [pc, #12]	@ (80081e8 <stdio_exit_handler+0x10>)
 80081dc:	4803      	ldr	r0, [pc, #12]	@ (80081ec <stdio_exit_handler+0x14>)
 80081de:	f000 b869 	b.w	80082b4 <_fwalk_sglue>
 80081e2:	bf00      	nop
 80081e4:	200000fc 	.word	0x200000fc
 80081e8:	08008f2d 	.word	0x08008f2d
 80081ec:	2000010c 	.word	0x2000010c

080081f0 <cleanup_stdio>:
 80081f0:	6841      	ldr	r1, [r0, #4]
 80081f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <cleanup_stdio+0x34>)
 80081f4:	4299      	cmp	r1, r3
 80081f6:	b510      	push	{r4, lr}
 80081f8:	4604      	mov	r4, r0
 80081fa:	d001      	beq.n	8008200 <cleanup_stdio+0x10>
 80081fc:	f000 fe96 	bl	8008f2c <_fflush_r>
 8008200:	68a1      	ldr	r1, [r4, #8]
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <cleanup_stdio+0x38>)
 8008204:	4299      	cmp	r1, r3
 8008206:	d002      	beq.n	800820e <cleanup_stdio+0x1e>
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fe8f 	bl	8008f2c <_fflush_r>
 800820e:	68e1      	ldr	r1, [r4, #12]
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <cleanup_stdio+0x3c>)
 8008212:	4299      	cmp	r1, r3
 8008214:	d004      	beq.n	8008220 <cleanup_stdio+0x30>
 8008216:	4620      	mov	r0, r4
 8008218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800821c:	f000 be86 	b.w	8008f2c <_fflush_r>
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	200021ec 	.word	0x200021ec
 8008228:	20002254 	.word	0x20002254
 800822c:	200022bc 	.word	0x200022bc

08008230 <global_stdio_init.part.0>:
 8008230:	b510      	push	{r4, lr}
 8008232:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <global_stdio_init.part.0+0x30>)
 8008234:	4c0b      	ldr	r4, [pc, #44]	@ (8008264 <global_stdio_init.part.0+0x34>)
 8008236:	4a0c      	ldr	r2, [pc, #48]	@ (8008268 <global_stdio_init.part.0+0x38>)
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	4620      	mov	r0, r4
 800823c:	2200      	movs	r2, #0
 800823e:	2104      	movs	r1, #4
 8008240:	f7ff ff94 	bl	800816c <std>
 8008244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008248:	2201      	movs	r2, #1
 800824a:	2109      	movs	r1, #9
 800824c:	f7ff ff8e 	bl	800816c <std>
 8008250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008254:	2202      	movs	r2, #2
 8008256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800825a:	2112      	movs	r1, #18
 800825c:	f7ff bf86 	b.w	800816c <std>
 8008260:	20002324 	.word	0x20002324
 8008264:	200021ec 	.word	0x200021ec
 8008268:	080081d9 	.word	0x080081d9

0800826c <__sfp_lock_acquire>:
 800826c:	4801      	ldr	r0, [pc, #4]	@ (8008274 <__sfp_lock_acquire+0x8>)
 800826e:	f000 ba00 	b.w	8008672 <__retarget_lock_acquire_recursive>
 8008272:	bf00      	nop
 8008274:	2000232d 	.word	0x2000232d

08008278 <__sfp_lock_release>:
 8008278:	4801      	ldr	r0, [pc, #4]	@ (8008280 <__sfp_lock_release+0x8>)
 800827a:	f000 b9fb 	b.w	8008674 <__retarget_lock_release_recursive>
 800827e:	bf00      	nop
 8008280:	2000232d 	.word	0x2000232d

08008284 <__sinit>:
 8008284:	b510      	push	{r4, lr}
 8008286:	4604      	mov	r4, r0
 8008288:	f7ff fff0 	bl	800826c <__sfp_lock_acquire>
 800828c:	6a23      	ldr	r3, [r4, #32]
 800828e:	b11b      	cbz	r3, 8008298 <__sinit+0x14>
 8008290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008294:	f7ff bff0 	b.w	8008278 <__sfp_lock_release>
 8008298:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <__sinit+0x28>)
 800829a:	6223      	str	r3, [r4, #32]
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <__sinit+0x2c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f5      	bne.n	8008290 <__sinit+0xc>
 80082a4:	f7ff ffc4 	bl	8008230 <global_stdio_init.part.0>
 80082a8:	e7f2      	b.n	8008290 <__sinit+0xc>
 80082aa:	bf00      	nop
 80082ac:	080081f1 	.word	0x080081f1
 80082b0:	20002324 	.word	0x20002324

080082b4 <_fwalk_sglue>:
 80082b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b8:	4607      	mov	r7, r0
 80082ba:	4688      	mov	r8, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	2600      	movs	r6, #0
 80082c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082c4:	f1b9 0901 	subs.w	r9, r9, #1
 80082c8:	d505      	bpl.n	80082d6 <_fwalk_sglue+0x22>
 80082ca:	6824      	ldr	r4, [r4, #0]
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	d1f7      	bne.n	80082c0 <_fwalk_sglue+0xc>
 80082d0:	4630      	mov	r0, r6
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d907      	bls.n	80082ec <_fwalk_sglue+0x38>
 80082dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082e0:	3301      	adds	r3, #1
 80082e2:	d003      	beq.n	80082ec <_fwalk_sglue+0x38>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4638      	mov	r0, r7
 80082e8:	47c0      	blx	r8
 80082ea:	4306      	orrs	r6, r0
 80082ec:	3568      	adds	r5, #104	@ 0x68
 80082ee:	e7e9      	b.n	80082c4 <_fwalk_sglue+0x10>

080082f0 <iprintf>:
 80082f0:	b40f      	push	{r0, r1, r2, r3}
 80082f2:	b507      	push	{r0, r1, r2, lr}
 80082f4:	4906      	ldr	r1, [pc, #24]	@ (8008310 <iprintf+0x20>)
 80082f6:	ab04      	add	r3, sp, #16
 80082f8:	6808      	ldr	r0, [r1, #0]
 80082fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80082fe:	6881      	ldr	r1, [r0, #8]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	f000 fae9 	bl	80088d8 <_vfiprintf_r>
 8008306:	b003      	add	sp, #12
 8008308:	f85d eb04 	ldr.w	lr, [sp], #4
 800830c:	b004      	add	sp, #16
 800830e:	4770      	bx	lr
 8008310:	20000108 	.word	0x20000108

08008314 <_puts_r>:
 8008314:	6a03      	ldr	r3, [r0, #32]
 8008316:	b570      	push	{r4, r5, r6, lr}
 8008318:	6884      	ldr	r4, [r0, #8]
 800831a:	4605      	mov	r5, r0
 800831c:	460e      	mov	r6, r1
 800831e:	b90b      	cbnz	r3, 8008324 <_puts_r+0x10>
 8008320:	f7ff ffb0 	bl	8008284 <__sinit>
 8008324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008326:	07db      	lsls	r3, r3, #31
 8008328:	d405      	bmi.n	8008336 <_puts_r+0x22>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	0598      	lsls	r0, r3, #22
 800832e:	d402      	bmi.n	8008336 <_puts_r+0x22>
 8008330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008332:	f000 f99e 	bl	8008672 <__retarget_lock_acquire_recursive>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	0719      	lsls	r1, r3, #28
 800833a:	d502      	bpl.n	8008342 <_puts_r+0x2e>
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d135      	bne.n	80083ae <_puts_r+0x9a>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f000 f8c5 	bl	80084d4 <__swsetup_r>
 800834a:	b380      	cbz	r0, 80083ae <_puts_r+0x9a>
 800834c:	f04f 35ff 	mov.w	r5, #4294967295
 8008350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008352:	07da      	lsls	r2, r3, #31
 8008354:	d405      	bmi.n	8008362 <_puts_r+0x4e>
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	059b      	lsls	r3, r3, #22
 800835a:	d402      	bmi.n	8008362 <_puts_r+0x4e>
 800835c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800835e:	f000 f989 	bl	8008674 <__retarget_lock_release_recursive>
 8008362:	4628      	mov	r0, r5
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	2b00      	cmp	r3, #0
 8008368:	da04      	bge.n	8008374 <_puts_r+0x60>
 800836a:	69a2      	ldr	r2, [r4, #24]
 800836c:	429a      	cmp	r2, r3
 800836e:	dc17      	bgt.n	80083a0 <_puts_r+0x8c>
 8008370:	290a      	cmp	r1, #10
 8008372:	d015      	beq.n	80083a0 <_puts_r+0x8c>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	6022      	str	r2, [r4, #0]
 800837a:	7019      	strb	r1, [r3, #0]
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008382:	3b01      	subs	r3, #1
 8008384:	60a3      	str	r3, [r4, #8]
 8008386:	2900      	cmp	r1, #0
 8008388:	d1ed      	bne.n	8008366 <_puts_r+0x52>
 800838a:	2b00      	cmp	r3, #0
 800838c:	da11      	bge.n	80083b2 <_puts_r+0x9e>
 800838e:	4622      	mov	r2, r4
 8008390:	210a      	movs	r1, #10
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f85f 	bl	8008456 <__swbuf_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d0d7      	beq.n	800834c <_puts_r+0x38>
 800839c:	250a      	movs	r5, #10
 800839e:	e7d7      	b.n	8008350 <_puts_r+0x3c>
 80083a0:	4622      	mov	r2, r4
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f857 	bl	8008456 <__swbuf_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d1e7      	bne.n	800837c <_puts_r+0x68>
 80083ac:	e7ce      	b.n	800834c <_puts_r+0x38>
 80083ae:	3e01      	subs	r6, #1
 80083b0:	e7e4      	b.n	800837c <_puts_r+0x68>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	6022      	str	r2, [r4, #0]
 80083b8:	220a      	movs	r2, #10
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	e7ee      	b.n	800839c <_puts_r+0x88>
	...

080083c0 <puts>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	@ (80083cc <puts+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f7ff bfa5 	b.w	8008314 <_puts_r>
 80083ca:	bf00      	nop
 80083cc:	20000108 	.word	0x20000108

080083d0 <__sread>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	460c      	mov	r4, r1
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	f000 f8fc 	bl	80085d4 <_read_r>
 80083dc:	2800      	cmp	r0, #0
 80083de:	bfab      	itete	ge
 80083e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083e2:	89a3      	ldrhlt	r3, [r4, #12]
 80083e4:	181b      	addge	r3, r3, r0
 80083e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083ea:	bfac      	ite	ge
 80083ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083ee:	81a3      	strhlt	r3, [r4, #12]
 80083f0:	bd10      	pop	{r4, pc}

080083f2 <__swrite>:
 80083f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f6:	461f      	mov	r7, r3
 80083f8:	898b      	ldrh	r3, [r1, #12]
 80083fa:	05db      	lsls	r3, r3, #23
 80083fc:	4605      	mov	r5, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	4616      	mov	r6, r2
 8008402:	d505      	bpl.n	8008410 <__swrite+0x1e>
 8008404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008408:	2302      	movs	r3, #2
 800840a:	2200      	movs	r2, #0
 800840c:	f000 f8d0 	bl	80085b0 <_lseek_r>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	4632      	mov	r2, r6
 800841e:	463b      	mov	r3, r7
 8008420:	4628      	mov	r0, r5
 8008422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008426:	f000 b8e7 	b.w	80085f8 <_write_r>

0800842a <__sseek>:
 800842a:	b510      	push	{r4, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008432:	f000 f8bd 	bl	80085b0 <_lseek_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	bf15      	itete	ne
 800843c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800843e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008442:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008446:	81a3      	strheq	r3, [r4, #12]
 8008448:	bf18      	it	ne
 800844a:	81a3      	strhne	r3, [r4, #12]
 800844c:	bd10      	pop	{r4, pc}

0800844e <__sclose>:
 800844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008452:	f000 b89d 	b.w	8008590 <_close_r>

08008456 <__swbuf_r>:
 8008456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008458:	460e      	mov	r6, r1
 800845a:	4614      	mov	r4, r2
 800845c:	4605      	mov	r5, r0
 800845e:	b118      	cbz	r0, 8008468 <__swbuf_r+0x12>
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	b90b      	cbnz	r3, 8008468 <__swbuf_r+0x12>
 8008464:	f7ff ff0e 	bl	8008284 <__sinit>
 8008468:	69a3      	ldr	r3, [r4, #24]
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	071a      	lsls	r2, r3, #28
 8008470:	d501      	bpl.n	8008476 <__swbuf_r+0x20>
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	b943      	cbnz	r3, 8008488 <__swbuf_r+0x32>
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	f000 f82b 	bl	80084d4 <__swsetup_r>
 800847e:	b118      	cbz	r0, 8008488 <__swbuf_r+0x32>
 8008480:	f04f 37ff 	mov.w	r7, #4294967295
 8008484:	4638      	mov	r0, r7
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	6922      	ldr	r2, [r4, #16]
 800848c:	1a98      	subs	r0, r3, r2
 800848e:	6963      	ldr	r3, [r4, #20]
 8008490:	b2f6      	uxtb	r6, r6
 8008492:	4283      	cmp	r3, r0
 8008494:	4637      	mov	r7, r6
 8008496:	dc05      	bgt.n	80084a4 <__swbuf_r+0x4e>
 8008498:	4621      	mov	r1, r4
 800849a:	4628      	mov	r0, r5
 800849c:	f000 fd46 	bl	8008f2c <_fflush_r>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d1ed      	bne.n	8008480 <__swbuf_r+0x2a>
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	60a3      	str	r3, [r4, #8]
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	6022      	str	r2, [r4, #0]
 80084b0:	701e      	strb	r6, [r3, #0]
 80084b2:	6962      	ldr	r2, [r4, #20]
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d004      	beq.n	80084c4 <__swbuf_r+0x6e>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	07db      	lsls	r3, r3, #31
 80084be:	d5e1      	bpl.n	8008484 <__swbuf_r+0x2e>
 80084c0:	2e0a      	cmp	r6, #10
 80084c2:	d1df      	bne.n	8008484 <__swbuf_r+0x2e>
 80084c4:	4621      	mov	r1, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	f000 fd30 	bl	8008f2c <_fflush_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d0d9      	beq.n	8008484 <__swbuf_r+0x2e>
 80084d0:	e7d6      	b.n	8008480 <__swbuf_r+0x2a>
	...

080084d4 <__swsetup_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4b29      	ldr	r3, [pc, #164]	@ (800857c <__swsetup_r+0xa8>)
 80084d8:	4605      	mov	r5, r0
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	460c      	mov	r4, r1
 80084de:	b118      	cbz	r0, 80084e8 <__swsetup_r+0x14>
 80084e0:	6a03      	ldr	r3, [r0, #32]
 80084e2:	b90b      	cbnz	r3, 80084e8 <__swsetup_r+0x14>
 80084e4:	f7ff fece 	bl	8008284 <__sinit>
 80084e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ec:	0719      	lsls	r1, r3, #28
 80084ee:	d422      	bmi.n	8008536 <__swsetup_r+0x62>
 80084f0:	06da      	lsls	r2, r3, #27
 80084f2:	d407      	bmi.n	8008504 <__swsetup_r+0x30>
 80084f4:	2209      	movs	r2, #9
 80084f6:	602a      	str	r2, [r5, #0]
 80084f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008502:	e033      	b.n	800856c <__swsetup_r+0x98>
 8008504:	0758      	lsls	r0, r3, #29
 8008506:	d512      	bpl.n	800852e <__swsetup_r+0x5a>
 8008508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800850a:	b141      	cbz	r1, 800851e <__swsetup_r+0x4a>
 800850c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008510:	4299      	cmp	r1, r3
 8008512:	d002      	beq.n	800851a <__swsetup_r+0x46>
 8008514:	4628      	mov	r0, r5
 8008516:	f000 f8bd 	bl	8008694 <_free_r>
 800851a:	2300      	movs	r3, #0
 800851c:	6363      	str	r3, [r4, #52]	@ 0x34
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	2300      	movs	r3, #0
 8008528:	6063      	str	r3, [r4, #4]
 800852a:	6923      	ldr	r3, [r4, #16]
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	f043 0308 	orr.w	r3, r3, #8
 8008534:	81a3      	strh	r3, [r4, #12]
 8008536:	6923      	ldr	r3, [r4, #16]
 8008538:	b94b      	cbnz	r3, 800854e <__swsetup_r+0x7a>
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008544:	d003      	beq.n	800854e <__swsetup_r+0x7a>
 8008546:	4621      	mov	r1, r4
 8008548:	4628      	mov	r0, r5
 800854a:	f000 fd3d 	bl	8008fc8 <__smakebuf_r>
 800854e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008552:	f013 0201 	ands.w	r2, r3, #1
 8008556:	d00a      	beq.n	800856e <__swsetup_r+0x9a>
 8008558:	2200      	movs	r2, #0
 800855a:	60a2      	str	r2, [r4, #8]
 800855c:	6962      	ldr	r2, [r4, #20]
 800855e:	4252      	negs	r2, r2
 8008560:	61a2      	str	r2, [r4, #24]
 8008562:	6922      	ldr	r2, [r4, #16]
 8008564:	b942      	cbnz	r2, 8008578 <__swsetup_r+0xa4>
 8008566:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800856a:	d1c5      	bne.n	80084f8 <__swsetup_r+0x24>
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	0799      	lsls	r1, r3, #30
 8008570:	bf58      	it	pl
 8008572:	6962      	ldrpl	r2, [r4, #20]
 8008574:	60a2      	str	r2, [r4, #8]
 8008576:	e7f4      	b.n	8008562 <__swsetup_r+0x8e>
 8008578:	2000      	movs	r0, #0
 800857a:	e7f7      	b.n	800856c <__swsetup_r+0x98>
 800857c:	20000108 	.word	0x20000108

08008580 <memset>:
 8008580:	4402      	add	r2, r0
 8008582:	4603      	mov	r3, r0
 8008584:	4293      	cmp	r3, r2
 8008586:	d100      	bne.n	800858a <memset+0xa>
 8008588:	4770      	bx	lr
 800858a:	f803 1b01 	strb.w	r1, [r3], #1
 800858e:	e7f9      	b.n	8008584 <memset+0x4>

08008590 <_close_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d06      	ldr	r5, [pc, #24]	@ (80085ac <_close_r+0x1c>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	f7f8 fc59 	bl	8000e52 <_close>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_close_r+0x1a>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_close_r+0x1a>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20002328 	.word	0x20002328

080085b0 <_lseek_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d07      	ldr	r5, [pc, #28]	@ (80085d0 <_lseek_r+0x20>)
 80085b4:	4604      	mov	r4, r0
 80085b6:	4608      	mov	r0, r1
 80085b8:	4611      	mov	r1, r2
 80085ba:	2200      	movs	r2, #0
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7f8 fc6e 	bl	8000ea0 <_lseek>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_lseek_r+0x1e>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_lseek_r+0x1e>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	20002328 	.word	0x20002328

080085d4 <_read_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d07      	ldr	r5, [pc, #28]	@ (80085f4 <_read_r+0x20>)
 80085d8:	4604      	mov	r4, r0
 80085da:	4608      	mov	r0, r1
 80085dc:	4611      	mov	r1, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f7f8 fc18 	bl	8000e18 <_read>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_read_r+0x1e>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_read_r+0x1e>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20002328 	.word	0x20002328

080085f8 <_write_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d07      	ldr	r5, [pc, #28]	@ (8008618 <_write_r+0x20>)
 80085fc:	4604      	mov	r4, r0
 80085fe:	4608      	mov	r0, r1
 8008600:	4611      	mov	r1, r2
 8008602:	2200      	movs	r2, #0
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	f7f8 fa1b 	bl	8000a42 <_write>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_write_r+0x1e>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_write_r+0x1e>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	20002328 	.word	0x20002328

0800861c <__errno>:
 800861c:	4b01      	ldr	r3, [pc, #4]	@ (8008624 <__errno+0x8>)
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000108 	.word	0x20000108

08008628 <__libc_init_array>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4d0d      	ldr	r5, [pc, #52]	@ (8008660 <__libc_init_array+0x38>)
 800862c:	4c0d      	ldr	r4, [pc, #52]	@ (8008664 <__libc_init_array+0x3c>)
 800862e:	1b64      	subs	r4, r4, r5
 8008630:	10a4      	asrs	r4, r4, #2
 8008632:	2600      	movs	r6, #0
 8008634:	42a6      	cmp	r6, r4
 8008636:	d109      	bne.n	800864c <__libc_init_array+0x24>
 8008638:	4d0b      	ldr	r5, [pc, #44]	@ (8008668 <__libc_init_array+0x40>)
 800863a:	4c0c      	ldr	r4, [pc, #48]	@ (800866c <__libc_init_array+0x44>)
 800863c:	f000 fd32 	bl	80090a4 <_init>
 8008640:	1b64      	subs	r4, r4, r5
 8008642:	10a4      	asrs	r4, r4, #2
 8008644:	2600      	movs	r6, #0
 8008646:	42a6      	cmp	r6, r4
 8008648:	d105      	bne.n	8008656 <__libc_init_array+0x2e>
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008650:	4798      	blx	r3
 8008652:	3601      	adds	r6, #1
 8008654:	e7ee      	b.n	8008634 <__libc_init_array+0xc>
 8008656:	f855 3b04 	ldr.w	r3, [r5], #4
 800865a:	4798      	blx	r3
 800865c:	3601      	adds	r6, #1
 800865e:	e7f2      	b.n	8008646 <__libc_init_array+0x1e>
 8008660:	080093a0 	.word	0x080093a0
 8008664:	080093a0 	.word	0x080093a0
 8008668:	080093a0 	.word	0x080093a0
 800866c:	080093a4 	.word	0x080093a4

08008670 <__retarget_lock_init_recursive>:
 8008670:	4770      	bx	lr

08008672 <__retarget_lock_acquire_recursive>:
 8008672:	4770      	bx	lr

08008674 <__retarget_lock_release_recursive>:
 8008674:	4770      	bx	lr

08008676 <memcpy>:
 8008676:	440a      	add	r2, r1
 8008678:	4291      	cmp	r1, r2
 800867a:	f100 33ff 	add.w	r3, r0, #4294967295
 800867e:	d100      	bne.n	8008682 <memcpy+0xc>
 8008680:	4770      	bx	lr
 8008682:	b510      	push	{r4, lr}
 8008684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800868c:	4291      	cmp	r1, r2
 800868e:	d1f9      	bne.n	8008684 <memcpy+0xe>
 8008690:	bd10      	pop	{r4, pc}
	...

08008694 <_free_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4605      	mov	r5, r0
 8008698:	2900      	cmp	r1, #0
 800869a:	d041      	beq.n	8008720 <_free_r+0x8c>
 800869c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a0:	1f0c      	subs	r4, r1, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfb8      	it	lt
 80086a6:	18e4      	addlt	r4, r4, r3
 80086a8:	f000 f8e0 	bl	800886c <__malloc_lock>
 80086ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008724 <_free_r+0x90>)
 80086ae:	6813      	ldr	r3, [r2, #0]
 80086b0:	b933      	cbnz	r3, 80086c0 <_free_r+0x2c>
 80086b2:	6063      	str	r3, [r4, #4]
 80086b4:	6014      	str	r4, [r2, #0]
 80086b6:	4628      	mov	r0, r5
 80086b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086bc:	f000 b8dc 	b.w	8008878 <__malloc_unlock>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d908      	bls.n	80086d6 <_free_r+0x42>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	1821      	adds	r1, r4, r0
 80086c8:	428b      	cmp	r3, r1
 80086ca:	bf01      	itttt	eq
 80086cc:	6819      	ldreq	r1, [r3, #0]
 80086ce:	685b      	ldreq	r3, [r3, #4]
 80086d0:	1809      	addeq	r1, r1, r0
 80086d2:	6021      	streq	r1, [r4, #0]
 80086d4:	e7ed      	b.n	80086b2 <_free_r+0x1e>
 80086d6:	461a      	mov	r2, r3
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	b10b      	cbz	r3, 80086e0 <_free_r+0x4c>
 80086dc:	42a3      	cmp	r3, r4
 80086de:	d9fa      	bls.n	80086d6 <_free_r+0x42>
 80086e0:	6811      	ldr	r1, [r2, #0]
 80086e2:	1850      	adds	r0, r2, r1
 80086e4:	42a0      	cmp	r0, r4
 80086e6:	d10b      	bne.n	8008700 <_free_r+0x6c>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	4401      	add	r1, r0
 80086ec:	1850      	adds	r0, r2, r1
 80086ee:	4283      	cmp	r3, r0
 80086f0:	6011      	str	r1, [r2, #0]
 80086f2:	d1e0      	bne.n	80086b6 <_free_r+0x22>
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	6053      	str	r3, [r2, #4]
 80086fa:	4408      	add	r0, r1
 80086fc:	6010      	str	r0, [r2, #0]
 80086fe:	e7da      	b.n	80086b6 <_free_r+0x22>
 8008700:	d902      	bls.n	8008708 <_free_r+0x74>
 8008702:	230c      	movs	r3, #12
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	e7d6      	b.n	80086b6 <_free_r+0x22>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	1821      	adds	r1, r4, r0
 800870c:	428b      	cmp	r3, r1
 800870e:	bf04      	itt	eq
 8008710:	6819      	ldreq	r1, [r3, #0]
 8008712:	685b      	ldreq	r3, [r3, #4]
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	bf04      	itt	eq
 8008718:	1809      	addeq	r1, r1, r0
 800871a:	6021      	streq	r1, [r4, #0]
 800871c:	6054      	str	r4, [r2, #4]
 800871e:	e7ca      	b.n	80086b6 <_free_r+0x22>
 8008720:	bd38      	pop	{r3, r4, r5, pc}
 8008722:	bf00      	nop
 8008724:	20002334 	.word	0x20002334

08008728 <sbrk_aligned>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	4e0f      	ldr	r6, [pc, #60]	@ (8008768 <sbrk_aligned+0x40>)
 800872c:	460c      	mov	r4, r1
 800872e:	6831      	ldr	r1, [r6, #0]
 8008730:	4605      	mov	r5, r0
 8008732:	b911      	cbnz	r1, 800873a <sbrk_aligned+0x12>
 8008734:	f000 fca6 	bl	8009084 <_sbrk_r>
 8008738:	6030      	str	r0, [r6, #0]
 800873a:	4621      	mov	r1, r4
 800873c:	4628      	mov	r0, r5
 800873e:	f000 fca1 	bl	8009084 <_sbrk_r>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d103      	bne.n	800874e <sbrk_aligned+0x26>
 8008746:	f04f 34ff 	mov.w	r4, #4294967295
 800874a:	4620      	mov	r0, r4
 800874c:	bd70      	pop	{r4, r5, r6, pc}
 800874e:	1cc4      	adds	r4, r0, #3
 8008750:	f024 0403 	bic.w	r4, r4, #3
 8008754:	42a0      	cmp	r0, r4
 8008756:	d0f8      	beq.n	800874a <sbrk_aligned+0x22>
 8008758:	1a21      	subs	r1, r4, r0
 800875a:	4628      	mov	r0, r5
 800875c:	f000 fc92 	bl	8009084 <_sbrk_r>
 8008760:	3001      	adds	r0, #1
 8008762:	d1f2      	bne.n	800874a <sbrk_aligned+0x22>
 8008764:	e7ef      	b.n	8008746 <sbrk_aligned+0x1e>
 8008766:	bf00      	nop
 8008768:	20002330 	.word	0x20002330

0800876c <_malloc_r>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	1ccd      	adds	r5, r1, #3
 8008772:	f025 0503 	bic.w	r5, r5, #3
 8008776:	3508      	adds	r5, #8
 8008778:	2d0c      	cmp	r5, #12
 800877a:	bf38      	it	cc
 800877c:	250c      	movcc	r5, #12
 800877e:	2d00      	cmp	r5, #0
 8008780:	4606      	mov	r6, r0
 8008782:	db01      	blt.n	8008788 <_malloc_r+0x1c>
 8008784:	42a9      	cmp	r1, r5
 8008786:	d904      	bls.n	8008792 <_malloc_r+0x26>
 8008788:	230c      	movs	r3, #12
 800878a:	6033      	str	r3, [r6, #0]
 800878c:	2000      	movs	r0, #0
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008868 <_malloc_r+0xfc>
 8008796:	f000 f869 	bl	800886c <__malloc_lock>
 800879a:	f8d8 3000 	ldr.w	r3, [r8]
 800879e:	461c      	mov	r4, r3
 80087a0:	bb44      	cbnz	r4, 80087f4 <_malloc_r+0x88>
 80087a2:	4629      	mov	r1, r5
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7ff ffbf 	bl	8008728 <sbrk_aligned>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	4604      	mov	r4, r0
 80087ae:	d158      	bne.n	8008862 <_malloc_r+0xf6>
 80087b0:	f8d8 4000 	ldr.w	r4, [r8]
 80087b4:	4627      	mov	r7, r4
 80087b6:	2f00      	cmp	r7, #0
 80087b8:	d143      	bne.n	8008842 <_malloc_r+0xd6>
 80087ba:	2c00      	cmp	r4, #0
 80087bc:	d04b      	beq.n	8008856 <_malloc_r+0xea>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	4639      	mov	r1, r7
 80087c2:	4630      	mov	r0, r6
 80087c4:	eb04 0903 	add.w	r9, r4, r3
 80087c8:	f000 fc5c 	bl	8009084 <_sbrk_r>
 80087cc:	4581      	cmp	r9, r0
 80087ce:	d142      	bne.n	8008856 <_malloc_r+0xea>
 80087d0:	6821      	ldr	r1, [r4, #0]
 80087d2:	1a6d      	subs	r5, r5, r1
 80087d4:	4629      	mov	r1, r5
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ffa6 	bl	8008728 <sbrk_aligned>
 80087dc:	3001      	adds	r0, #1
 80087de:	d03a      	beq.n	8008856 <_malloc_r+0xea>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	442b      	add	r3, r5
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	f8d8 3000 	ldr.w	r3, [r8]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	bb62      	cbnz	r2, 8008848 <_malloc_r+0xdc>
 80087ee:	f8c8 7000 	str.w	r7, [r8]
 80087f2:	e00f      	b.n	8008814 <_malloc_r+0xa8>
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	1b52      	subs	r2, r2, r5
 80087f8:	d420      	bmi.n	800883c <_malloc_r+0xd0>
 80087fa:	2a0b      	cmp	r2, #11
 80087fc:	d917      	bls.n	800882e <_malloc_r+0xc2>
 80087fe:	1961      	adds	r1, r4, r5
 8008800:	42a3      	cmp	r3, r4
 8008802:	6025      	str	r5, [r4, #0]
 8008804:	bf18      	it	ne
 8008806:	6059      	strne	r1, [r3, #4]
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	bf08      	it	eq
 800880c:	f8c8 1000 	streq.w	r1, [r8]
 8008810:	5162      	str	r2, [r4, r5]
 8008812:	604b      	str	r3, [r1, #4]
 8008814:	4630      	mov	r0, r6
 8008816:	f000 f82f 	bl	8008878 <__malloc_unlock>
 800881a:	f104 000b 	add.w	r0, r4, #11
 800881e:	1d23      	adds	r3, r4, #4
 8008820:	f020 0007 	bic.w	r0, r0, #7
 8008824:	1ac2      	subs	r2, r0, r3
 8008826:	bf1c      	itt	ne
 8008828:	1a1b      	subne	r3, r3, r0
 800882a:	50a3      	strne	r3, [r4, r2]
 800882c:	e7af      	b.n	800878e <_malloc_r+0x22>
 800882e:	6862      	ldr	r2, [r4, #4]
 8008830:	42a3      	cmp	r3, r4
 8008832:	bf0c      	ite	eq
 8008834:	f8c8 2000 	streq.w	r2, [r8]
 8008838:	605a      	strne	r2, [r3, #4]
 800883a:	e7eb      	b.n	8008814 <_malloc_r+0xa8>
 800883c:	4623      	mov	r3, r4
 800883e:	6864      	ldr	r4, [r4, #4]
 8008840:	e7ae      	b.n	80087a0 <_malloc_r+0x34>
 8008842:	463c      	mov	r4, r7
 8008844:	687f      	ldr	r7, [r7, #4]
 8008846:	e7b6      	b.n	80087b6 <_malloc_r+0x4a>
 8008848:	461a      	mov	r2, r3
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	42a3      	cmp	r3, r4
 800884e:	d1fb      	bne.n	8008848 <_malloc_r+0xdc>
 8008850:	2300      	movs	r3, #0
 8008852:	6053      	str	r3, [r2, #4]
 8008854:	e7de      	b.n	8008814 <_malloc_r+0xa8>
 8008856:	230c      	movs	r3, #12
 8008858:	6033      	str	r3, [r6, #0]
 800885a:	4630      	mov	r0, r6
 800885c:	f000 f80c 	bl	8008878 <__malloc_unlock>
 8008860:	e794      	b.n	800878c <_malloc_r+0x20>
 8008862:	6005      	str	r5, [r0, #0]
 8008864:	e7d6      	b.n	8008814 <_malloc_r+0xa8>
 8008866:	bf00      	nop
 8008868:	20002334 	.word	0x20002334

0800886c <__malloc_lock>:
 800886c:	4801      	ldr	r0, [pc, #4]	@ (8008874 <__malloc_lock+0x8>)
 800886e:	f7ff bf00 	b.w	8008672 <__retarget_lock_acquire_recursive>
 8008872:	bf00      	nop
 8008874:	2000232c 	.word	0x2000232c

08008878 <__malloc_unlock>:
 8008878:	4801      	ldr	r0, [pc, #4]	@ (8008880 <__malloc_unlock+0x8>)
 800887a:	f7ff befb 	b.w	8008674 <__retarget_lock_release_recursive>
 800887e:	bf00      	nop
 8008880:	2000232c 	.word	0x2000232c

08008884 <__sfputc_r>:
 8008884:	6893      	ldr	r3, [r2, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	b410      	push	{r4}
 800888c:	6093      	str	r3, [r2, #8]
 800888e:	da08      	bge.n	80088a2 <__sfputc_r+0x1e>
 8008890:	6994      	ldr	r4, [r2, #24]
 8008892:	42a3      	cmp	r3, r4
 8008894:	db01      	blt.n	800889a <__sfputc_r+0x16>
 8008896:	290a      	cmp	r1, #10
 8008898:	d103      	bne.n	80088a2 <__sfputc_r+0x1e>
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	f7ff bdda 	b.w	8008456 <__swbuf_r>
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	1c58      	adds	r0, r3, #1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	7019      	strb	r1, [r3, #0]
 80088aa:	4608      	mov	r0, r1
 80088ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <__sfputs_r>:
 80088b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	18d5      	adds	r5, r2, r3
 80088bc:	42ac      	cmp	r4, r5
 80088be:	d101      	bne.n	80088c4 <__sfputs_r+0x12>
 80088c0:	2000      	movs	r0, #0
 80088c2:	e007      	b.n	80088d4 <__sfputs_r+0x22>
 80088c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c8:	463a      	mov	r2, r7
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffda 	bl	8008884 <__sfputc_r>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d1f3      	bne.n	80088bc <__sfputs_r+0xa>
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088d8 <_vfiprintf_r>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	460d      	mov	r5, r1
 80088de:	b09d      	sub	sp, #116	@ 0x74
 80088e0:	4614      	mov	r4, r2
 80088e2:	4698      	mov	r8, r3
 80088e4:	4606      	mov	r6, r0
 80088e6:	b118      	cbz	r0, 80088f0 <_vfiprintf_r+0x18>
 80088e8:	6a03      	ldr	r3, [r0, #32]
 80088ea:	b90b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x18>
 80088ec:	f7ff fcca 	bl	8008284 <__sinit>
 80088f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d405      	bmi.n	8008902 <_vfiprintf_r+0x2a>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	059a      	lsls	r2, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_vfiprintf_r+0x2a>
 80088fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fe:	f7ff feb8 	bl	8008672 <__retarget_lock_acquire_recursive>
 8008902:	89ab      	ldrh	r3, [r5, #12]
 8008904:	071b      	lsls	r3, r3, #28
 8008906:	d501      	bpl.n	800890c <_vfiprintf_r+0x34>
 8008908:	692b      	ldr	r3, [r5, #16]
 800890a:	b99b      	cbnz	r3, 8008934 <_vfiprintf_r+0x5c>
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff fde0 	bl	80084d4 <__swsetup_r>
 8008914:	b170      	cbz	r0, 8008934 <_vfiprintf_r+0x5c>
 8008916:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008918:	07dc      	lsls	r4, r3, #31
 800891a:	d504      	bpl.n	8008926 <_vfiprintf_r+0x4e>
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	b01d      	add	sp, #116	@ 0x74
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	89ab      	ldrh	r3, [r5, #12]
 8008928:	0598      	lsls	r0, r3, #22
 800892a:	d4f7      	bmi.n	800891c <_vfiprintf_r+0x44>
 800892c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800892e:	f7ff fea1 	bl	8008674 <__retarget_lock_release_recursive>
 8008932:	e7f3      	b.n	800891c <_vfiprintf_r+0x44>
 8008934:	2300      	movs	r3, #0
 8008936:	9309      	str	r3, [sp, #36]	@ 0x24
 8008938:	2320      	movs	r3, #32
 800893a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800893e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008942:	2330      	movs	r3, #48	@ 0x30
 8008944:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008af4 <_vfiprintf_r+0x21c>
 8008948:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800894c:	f04f 0901 	mov.w	r9, #1
 8008950:	4623      	mov	r3, r4
 8008952:	469a      	mov	sl, r3
 8008954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008958:	b10a      	cbz	r2, 800895e <_vfiprintf_r+0x86>
 800895a:	2a25      	cmp	r2, #37	@ 0x25
 800895c:	d1f9      	bne.n	8008952 <_vfiprintf_r+0x7a>
 800895e:	ebba 0b04 	subs.w	fp, sl, r4
 8008962:	d00b      	beq.n	800897c <_vfiprintf_r+0xa4>
 8008964:	465b      	mov	r3, fp
 8008966:	4622      	mov	r2, r4
 8008968:	4629      	mov	r1, r5
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff ffa1 	bl	80088b2 <__sfputs_r>
 8008970:	3001      	adds	r0, #1
 8008972:	f000 80a7 	beq.w	8008ac4 <_vfiprintf_r+0x1ec>
 8008976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008978:	445a      	add	r2, fp
 800897a:	9209      	str	r2, [sp, #36]	@ 0x24
 800897c:	f89a 3000 	ldrb.w	r3, [sl]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 809f 	beq.w	8008ac4 <_vfiprintf_r+0x1ec>
 8008986:	2300      	movs	r3, #0
 8008988:	f04f 32ff 	mov.w	r2, #4294967295
 800898c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008990:	f10a 0a01 	add.w	sl, sl, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	9307      	str	r3, [sp, #28]
 8008998:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800899c:	931a      	str	r3, [sp, #104]	@ 0x68
 800899e:	4654      	mov	r4, sl
 80089a0:	2205      	movs	r2, #5
 80089a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a6:	4853      	ldr	r0, [pc, #332]	@ (8008af4 <_vfiprintf_r+0x21c>)
 80089a8:	f7f7 fc12 	bl	80001d0 <memchr>
 80089ac:	9a04      	ldr	r2, [sp, #16]
 80089ae:	b9d8      	cbnz	r0, 80089e8 <_vfiprintf_r+0x110>
 80089b0:	06d1      	lsls	r1, r2, #27
 80089b2:	bf44      	itt	mi
 80089b4:	2320      	movmi	r3, #32
 80089b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ba:	0713      	lsls	r3, r2, #28
 80089bc:	bf44      	itt	mi
 80089be:	232b      	movmi	r3, #43	@ 0x2b
 80089c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c4:	f89a 3000 	ldrb.w	r3, [sl]
 80089c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ca:	d015      	beq.n	80089f8 <_vfiprintf_r+0x120>
 80089cc:	9a07      	ldr	r2, [sp, #28]
 80089ce:	4654      	mov	r4, sl
 80089d0:	2000      	movs	r0, #0
 80089d2:	f04f 0c0a 	mov.w	ip, #10
 80089d6:	4621      	mov	r1, r4
 80089d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089dc:	3b30      	subs	r3, #48	@ 0x30
 80089de:	2b09      	cmp	r3, #9
 80089e0:	d94b      	bls.n	8008a7a <_vfiprintf_r+0x1a2>
 80089e2:	b1b0      	cbz	r0, 8008a12 <_vfiprintf_r+0x13a>
 80089e4:	9207      	str	r2, [sp, #28]
 80089e6:	e014      	b.n	8008a12 <_vfiprintf_r+0x13a>
 80089e8:	eba0 0308 	sub.w	r3, r0, r8
 80089ec:	fa09 f303 	lsl.w	r3, r9, r3
 80089f0:	4313      	orrs	r3, r2
 80089f2:	9304      	str	r3, [sp, #16]
 80089f4:	46a2      	mov	sl, r4
 80089f6:	e7d2      	b.n	800899e <_vfiprintf_r+0xc6>
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	1d19      	adds	r1, r3, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	9103      	str	r1, [sp, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	bfbb      	ittet	lt
 8008a04:	425b      	neglt	r3, r3
 8008a06:	f042 0202 	orrlt.w	r2, r2, #2
 8008a0a:	9307      	strge	r3, [sp, #28]
 8008a0c:	9307      	strlt	r3, [sp, #28]
 8008a0e:	bfb8      	it	lt
 8008a10:	9204      	strlt	r2, [sp, #16]
 8008a12:	7823      	ldrb	r3, [r4, #0]
 8008a14:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a16:	d10a      	bne.n	8008a2e <_vfiprintf_r+0x156>
 8008a18:	7863      	ldrb	r3, [r4, #1]
 8008a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a1c:	d132      	bne.n	8008a84 <_vfiprintf_r+0x1ac>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	1d1a      	adds	r2, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	9203      	str	r2, [sp, #12]
 8008a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a2a:	3402      	adds	r4, #2
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b04 <_vfiprintf_r+0x22c>
 8008a32:	7821      	ldrb	r1, [r4, #0]
 8008a34:	2203      	movs	r2, #3
 8008a36:	4650      	mov	r0, sl
 8008a38:	f7f7 fbca 	bl	80001d0 <memchr>
 8008a3c:	b138      	cbz	r0, 8008a4e <_vfiprintf_r+0x176>
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	eba0 000a 	sub.w	r0, r0, sl
 8008a44:	2240      	movs	r2, #64	@ 0x40
 8008a46:	4082      	lsls	r2, r0
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	3401      	adds	r4, #1
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a52:	4829      	ldr	r0, [pc, #164]	@ (8008af8 <_vfiprintf_r+0x220>)
 8008a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a58:	2206      	movs	r2, #6
 8008a5a:	f7f7 fbb9 	bl	80001d0 <memchr>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d03f      	beq.n	8008ae2 <_vfiprintf_r+0x20a>
 8008a62:	4b26      	ldr	r3, [pc, #152]	@ (8008afc <_vfiprintf_r+0x224>)
 8008a64:	bb1b      	cbnz	r3, 8008aae <_vfiprintf_r+0x1d6>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	3307      	adds	r3, #7
 8008a6a:	f023 0307 	bic.w	r3, r3, #7
 8008a6e:	3308      	adds	r3, #8
 8008a70:	9303      	str	r3, [sp, #12]
 8008a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a74:	443b      	add	r3, r7
 8008a76:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a78:	e76a      	b.n	8008950 <_vfiprintf_r+0x78>
 8008a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7e:	460c      	mov	r4, r1
 8008a80:	2001      	movs	r0, #1
 8008a82:	e7a8      	b.n	80089d6 <_vfiprintf_r+0xfe>
 8008a84:	2300      	movs	r3, #0
 8008a86:	3401      	adds	r4, #1
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f04f 0c0a 	mov.w	ip, #10
 8008a90:	4620      	mov	r0, r4
 8008a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a96:	3a30      	subs	r2, #48	@ 0x30
 8008a98:	2a09      	cmp	r2, #9
 8008a9a:	d903      	bls.n	8008aa4 <_vfiprintf_r+0x1cc>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0c6      	beq.n	8008a2e <_vfiprintf_r+0x156>
 8008aa0:	9105      	str	r1, [sp, #20]
 8008aa2:	e7c4      	b.n	8008a2e <_vfiprintf_r+0x156>
 8008aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e7f0      	b.n	8008a90 <_vfiprintf_r+0x1b8>
 8008aae:	ab03      	add	r3, sp, #12
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	4b12      	ldr	r3, [pc, #72]	@ (8008b00 <_vfiprintf_r+0x228>)
 8008ab6:	a904      	add	r1, sp, #16
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f3af 8000 	nop.w
 8008abe:	4607      	mov	r7, r0
 8008ac0:	1c78      	adds	r0, r7, #1
 8008ac2:	d1d6      	bne.n	8008a72 <_vfiprintf_r+0x19a>
 8008ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ac6:	07d9      	lsls	r1, r3, #31
 8008ac8:	d405      	bmi.n	8008ad6 <_vfiprintf_r+0x1fe>
 8008aca:	89ab      	ldrh	r3, [r5, #12]
 8008acc:	059a      	lsls	r2, r3, #22
 8008ace:	d402      	bmi.n	8008ad6 <_vfiprintf_r+0x1fe>
 8008ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ad2:	f7ff fdcf 	bl	8008674 <__retarget_lock_release_recursive>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	065b      	lsls	r3, r3, #25
 8008ada:	f53f af1f 	bmi.w	800891c <_vfiprintf_r+0x44>
 8008ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae0:	e71e      	b.n	8008920 <_vfiprintf_r+0x48>
 8008ae2:	ab03      	add	r3, sp, #12
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	462a      	mov	r2, r5
 8008ae8:	4b05      	ldr	r3, [pc, #20]	@ (8008b00 <_vfiprintf_r+0x228>)
 8008aea:	a904      	add	r1, sp, #16
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 f879 	bl	8008be4 <_printf_i>
 8008af2:	e7e4      	b.n	8008abe <_vfiprintf_r+0x1e6>
 8008af4:	08009364 	.word	0x08009364
 8008af8:	0800936e 	.word	0x0800936e
 8008afc:	00000000 	.word	0x00000000
 8008b00:	080088b3 	.word	0x080088b3
 8008b04:	0800936a 	.word	0x0800936a

08008b08 <_printf_common>:
 8008b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	4698      	mov	r8, r3
 8008b10:	688a      	ldr	r2, [r1, #8]
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	bfb8      	it	lt
 8008b1c:	4613      	movlt	r3, r2
 8008b1e:	6033      	str	r3, [r6, #0]
 8008b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b24:	4607      	mov	r7, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b10a      	cbz	r2, 8008b2e <_printf_common+0x26>
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	0699      	lsls	r1, r3, #26
 8008b32:	bf42      	ittt	mi
 8008b34:	6833      	ldrmi	r3, [r6, #0]
 8008b36:	3302      	addmi	r3, #2
 8008b38:	6033      	strmi	r3, [r6, #0]
 8008b3a:	6825      	ldr	r5, [r4, #0]
 8008b3c:	f015 0506 	ands.w	r5, r5, #6
 8008b40:	d106      	bne.n	8008b50 <_printf_common+0x48>
 8008b42:	f104 0a19 	add.w	sl, r4, #25
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	6832      	ldr	r2, [r6, #0]
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	42ab      	cmp	r3, r5
 8008b4e:	dc26      	bgt.n	8008b9e <_printf_common+0x96>
 8008b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	3b00      	subs	r3, #0
 8008b58:	bf18      	it	ne
 8008b5a:	2301      	movne	r3, #1
 8008b5c:	0692      	lsls	r2, r2, #26
 8008b5e:	d42b      	bmi.n	8008bb8 <_printf_common+0xb0>
 8008b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b64:	4641      	mov	r1, r8
 8008b66:	4638      	mov	r0, r7
 8008b68:	47c8      	blx	r9
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d01e      	beq.n	8008bac <_printf_common+0xa4>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	6922      	ldr	r2, [r4, #16]
 8008b72:	f003 0306 	and.w	r3, r3, #6
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	bf02      	ittt	eq
 8008b7a:	68e5      	ldreq	r5, [r4, #12]
 8008b7c:	6833      	ldreq	r3, [r6, #0]
 8008b7e:	1aed      	subeq	r5, r5, r3
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	bf0c      	ite	eq
 8008b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b88:	2500      	movne	r5, #0
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bfc4      	itt	gt
 8008b8e:	1a9b      	subgt	r3, r3, r2
 8008b90:	18ed      	addgt	r5, r5, r3
 8008b92:	2600      	movs	r6, #0
 8008b94:	341a      	adds	r4, #26
 8008b96:	42b5      	cmp	r5, r6
 8008b98:	d11a      	bne.n	8008bd0 <_printf_common+0xc8>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e008      	b.n	8008bb0 <_printf_common+0xa8>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	47c8      	blx	r9
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d103      	bne.n	8008bb4 <_printf_common+0xac>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	e7c6      	b.n	8008b46 <_printf_common+0x3e>
 8008bb8:	18e1      	adds	r1, r4, r3
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	2030      	movs	r0, #48	@ 0x30
 8008bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bc2:	4422      	add	r2, r4
 8008bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bcc:	3302      	adds	r3, #2
 8008bce:	e7c7      	b.n	8008b60 <_printf_common+0x58>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c8      	blx	r9
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d0e6      	beq.n	8008bac <_printf_common+0xa4>
 8008bde:	3601      	adds	r6, #1
 8008be0:	e7d9      	b.n	8008b96 <_printf_common+0x8e>
	...

08008be4 <_printf_i>:
 8008be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	7e0f      	ldrb	r7, [r1, #24]
 8008bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bec:	2f78      	cmp	r7, #120	@ 0x78
 8008bee:	4691      	mov	r9, r2
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	469a      	mov	sl, r3
 8008bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bfa:	d807      	bhi.n	8008c0c <_printf_i+0x28>
 8008bfc:	2f62      	cmp	r7, #98	@ 0x62
 8008bfe:	d80a      	bhi.n	8008c16 <_printf_i+0x32>
 8008c00:	2f00      	cmp	r7, #0
 8008c02:	f000 80d2 	beq.w	8008daa <_printf_i+0x1c6>
 8008c06:	2f58      	cmp	r7, #88	@ 0x58
 8008c08:	f000 80b9 	beq.w	8008d7e <_printf_i+0x19a>
 8008c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c14:	e03a      	b.n	8008c8c <_printf_i+0xa8>
 8008c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c1a:	2b15      	cmp	r3, #21
 8008c1c:	d8f6      	bhi.n	8008c0c <_printf_i+0x28>
 8008c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c24 <_printf_i+0x40>)
 8008c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c24:	08008c7d 	.word	0x08008c7d
 8008c28:	08008c91 	.word	0x08008c91
 8008c2c:	08008c0d 	.word	0x08008c0d
 8008c30:	08008c0d 	.word	0x08008c0d
 8008c34:	08008c0d 	.word	0x08008c0d
 8008c38:	08008c0d 	.word	0x08008c0d
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008c0d 	.word	0x08008c0d
 8008c44:	08008c0d 	.word	0x08008c0d
 8008c48:	08008c0d 	.word	0x08008c0d
 8008c4c:	08008c0d 	.word	0x08008c0d
 8008c50:	08008d91 	.word	0x08008d91
 8008c54:	08008cbb 	.word	0x08008cbb
 8008c58:	08008d4b 	.word	0x08008d4b
 8008c5c:	08008c0d 	.word	0x08008c0d
 8008c60:	08008c0d 	.word	0x08008c0d
 8008c64:	08008db3 	.word	0x08008db3
 8008c68:	08008c0d 	.word	0x08008c0d
 8008c6c:	08008cbb 	.word	0x08008cbb
 8008c70:	08008c0d 	.word	0x08008c0d
 8008c74:	08008c0d 	.word	0x08008c0d
 8008c78:	08008d53 	.word	0x08008d53
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	1d1a      	adds	r2, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6032      	str	r2, [r6, #0]
 8008c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e09d      	b.n	8008dcc <_printf_i+0x1e8>
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	6031      	str	r1, [r6, #0]
 8008c98:	0606      	lsls	r6, r0, #24
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0xbc>
 8008c9c:	681d      	ldr	r5, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <_printf_i+0xc4>
 8008ca0:	0645      	lsls	r5, r0, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0xb8>
 8008ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	da03      	bge.n	8008cb4 <_printf_i+0xd0>
 8008cac:	232d      	movs	r3, #45	@ 0x2d
 8008cae:	426d      	negs	r5, r5
 8008cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cb4:	4859      	ldr	r0, [pc, #356]	@ (8008e1c <_printf_i+0x238>)
 8008cb6:	230a      	movs	r3, #10
 8008cb8:	e011      	b.n	8008cde <_printf_i+0xfa>
 8008cba:	6821      	ldr	r1, [r4, #0]
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	0608      	lsls	r0, r1, #24
 8008cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cc4:	d402      	bmi.n	8008ccc <_printf_i+0xe8>
 8008cc6:	0649      	lsls	r1, r1, #25
 8008cc8:	bf48      	it	mi
 8008cca:	b2ad      	uxthmi	r5, r5
 8008ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cce:	4853      	ldr	r0, [pc, #332]	@ (8008e1c <_printf_i+0x238>)
 8008cd0:	6033      	str	r3, [r6, #0]
 8008cd2:	bf14      	ite	ne
 8008cd4:	230a      	movne	r3, #10
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	2100      	movs	r1, #0
 8008cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cde:	6866      	ldr	r6, [r4, #4]
 8008ce0:	60a6      	str	r6, [r4, #8]
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	bfa2      	ittt	ge
 8008ce6:	6821      	ldrge	r1, [r4, #0]
 8008ce8:	f021 0104 	bicge.w	r1, r1, #4
 8008cec:	6021      	strge	r1, [r4, #0]
 8008cee:	b90d      	cbnz	r5, 8008cf4 <_printf_i+0x110>
 8008cf0:	2e00      	cmp	r6, #0
 8008cf2:	d04b      	beq.n	8008d8c <_printf_i+0x1a8>
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8008cfe:	5dc7      	ldrb	r7, [r0, r7]
 8008d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d04:	462f      	mov	r7, r5
 8008d06:	42bb      	cmp	r3, r7
 8008d08:	460d      	mov	r5, r1
 8008d0a:	d9f4      	bls.n	8008cf6 <_printf_i+0x112>
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	d10b      	bne.n	8008d28 <_printf_i+0x144>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	07df      	lsls	r7, r3, #31
 8008d14:	d508      	bpl.n	8008d28 <_printf_i+0x144>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	6861      	ldr	r1, [r4, #4]
 8008d1a:	4299      	cmp	r1, r3
 8008d1c:	bfde      	ittt	le
 8008d1e:	2330      	movle	r3, #48	@ 0x30
 8008d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d28:	1b92      	subs	r2, r2, r6
 8008d2a:	6122      	str	r2, [r4, #16]
 8008d2c:	f8cd a000 	str.w	sl, [sp]
 8008d30:	464b      	mov	r3, r9
 8008d32:	aa03      	add	r2, sp, #12
 8008d34:	4621      	mov	r1, r4
 8008d36:	4640      	mov	r0, r8
 8008d38:	f7ff fee6 	bl	8008b08 <_printf_common>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d14a      	bne.n	8008dd6 <_printf_i+0x1f2>
 8008d40:	f04f 30ff 	mov.w	r0, #4294967295
 8008d44:	b004      	add	sp, #16
 8008d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	f043 0320 	orr.w	r3, r3, #32
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	4833      	ldr	r0, [pc, #204]	@ (8008e20 <_printf_i+0x23c>)
 8008d54:	2778      	movs	r7, #120	@ 0x78
 8008d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	6831      	ldr	r1, [r6, #0]
 8008d5e:	061f      	lsls	r7, r3, #24
 8008d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d64:	d402      	bmi.n	8008d6c <_printf_i+0x188>
 8008d66:	065f      	lsls	r7, r3, #25
 8008d68:	bf48      	it	mi
 8008d6a:	b2ad      	uxthmi	r5, r5
 8008d6c:	6031      	str	r1, [r6, #0]
 8008d6e:	07d9      	lsls	r1, r3, #31
 8008d70:	bf44      	itt	mi
 8008d72:	f043 0320 	orrmi.w	r3, r3, #32
 8008d76:	6023      	strmi	r3, [r4, #0]
 8008d78:	b11d      	cbz	r5, 8008d82 <_printf_i+0x19e>
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	e7ac      	b.n	8008cd8 <_printf_i+0xf4>
 8008d7e:	4827      	ldr	r0, [pc, #156]	@ (8008e1c <_printf_i+0x238>)
 8008d80:	e7e9      	b.n	8008d56 <_printf_i+0x172>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	f023 0320 	bic.w	r3, r3, #32
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	e7f6      	b.n	8008d7a <_printf_i+0x196>
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	e7bd      	b.n	8008d0c <_printf_i+0x128>
 8008d90:	6833      	ldr	r3, [r6, #0]
 8008d92:	6825      	ldr	r5, [r4, #0]
 8008d94:	6961      	ldr	r1, [r4, #20]
 8008d96:	1d18      	adds	r0, r3, #4
 8008d98:	6030      	str	r0, [r6, #0]
 8008d9a:	062e      	lsls	r6, r5, #24
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0x1c0>
 8008da0:	6019      	str	r1, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0x1c6>
 8008da4:	0668      	lsls	r0, r5, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0x1bc>
 8008da8:	8019      	strh	r1, [r3, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	4616      	mov	r6, r2
 8008db0:	e7bc      	b.n	8008d2c <_printf_i+0x148>
 8008db2:	6833      	ldr	r3, [r6, #0]
 8008db4:	1d1a      	adds	r2, r3, #4
 8008db6:	6032      	str	r2, [r6, #0]
 8008db8:	681e      	ldr	r6, [r3, #0]
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7f7 fa06 	bl	80001d0 <memchr>
 8008dc4:	b108      	cbz	r0, 8008dca <_printf_i+0x1e6>
 8008dc6:	1b80      	subs	r0, r0, r6
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dd4:	e7aa      	b.n	8008d2c <_printf_i+0x148>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d0ad      	beq.n	8008d40 <_printf_i+0x15c>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	079b      	lsls	r3, r3, #30
 8008de8:	d413      	bmi.n	8008e12 <_printf_i+0x22e>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	4298      	cmp	r0, r3
 8008df0:	bfb8      	it	lt
 8008df2:	4618      	movlt	r0, r3
 8008df4:	e7a6      	b.n	8008d44 <_printf_i+0x160>
 8008df6:	2301      	movs	r3, #1
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d09d      	beq.n	8008d40 <_printf_i+0x15c>
 8008e04:	3501      	adds	r5, #1
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	9903      	ldr	r1, [sp, #12]
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dcf2      	bgt.n	8008df6 <_printf_i+0x212>
 8008e10:	e7eb      	b.n	8008dea <_printf_i+0x206>
 8008e12:	2500      	movs	r5, #0
 8008e14:	f104 0619 	add.w	r6, r4, #25
 8008e18:	e7f5      	b.n	8008e06 <_printf_i+0x222>
 8008e1a:	bf00      	nop
 8008e1c:	08009375 	.word	0x08009375
 8008e20:	08009386 	.word	0x08009386

08008e24 <__sflush_r>:
 8008e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2c:	0716      	lsls	r6, r2, #28
 8008e2e:	4605      	mov	r5, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	d454      	bmi.n	8008ede <__sflush_r+0xba>
 8008e34:	684b      	ldr	r3, [r1, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dc02      	bgt.n	8008e40 <__sflush_r+0x1c>
 8008e3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dd48      	ble.n	8008ed2 <__sflush_r+0xae>
 8008e40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e42:	2e00      	cmp	r6, #0
 8008e44:	d045      	beq.n	8008ed2 <__sflush_r+0xae>
 8008e46:	2300      	movs	r3, #0
 8008e48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e4c:	682f      	ldr	r7, [r5, #0]
 8008e4e:	6a21      	ldr	r1, [r4, #32]
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	d030      	beq.n	8008eb6 <__sflush_r+0x92>
 8008e54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	0759      	lsls	r1, r3, #29
 8008e5a:	d505      	bpl.n	8008e68 <__sflush_r+0x44>
 8008e5c:	6863      	ldr	r3, [r4, #4]
 8008e5e:	1ad2      	subs	r2, r2, r3
 8008e60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e62:	b10b      	cbz	r3, 8008e68 <__sflush_r+0x44>
 8008e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e6c:	6a21      	ldr	r1, [r4, #32]
 8008e6e:	4628      	mov	r0, r5
 8008e70:	47b0      	blx	r6
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	d106      	bne.n	8008e86 <__sflush_r+0x62>
 8008e78:	6829      	ldr	r1, [r5, #0]
 8008e7a:	291d      	cmp	r1, #29
 8008e7c:	d82b      	bhi.n	8008ed6 <__sflush_r+0xb2>
 8008e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f28 <__sflush_r+0x104>)
 8008e80:	410a      	asrs	r2, r1
 8008e82:	07d6      	lsls	r6, r2, #31
 8008e84:	d427      	bmi.n	8008ed6 <__sflush_r+0xb2>
 8008e86:	2200      	movs	r2, #0
 8008e88:	6062      	str	r2, [r4, #4]
 8008e8a:	04d9      	lsls	r1, r3, #19
 8008e8c:	6922      	ldr	r2, [r4, #16]
 8008e8e:	6022      	str	r2, [r4, #0]
 8008e90:	d504      	bpl.n	8008e9c <__sflush_r+0x78>
 8008e92:	1c42      	adds	r2, r0, #1
 8008e94:	d101      	bne.n	8008e9a <__sflush_r+0x76>
 8008e96:	682b      	ldr	r3, [r5, #0]
 8008e98:	b903      	cbnz	r3, 8008e9c <__sflush_r+0x78>
 8008e9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e9e:	602f      	str	r7, [r5, #0]
 8008ea0:	b1b9      	cbz	r1, 8008ed2 <__sflush_r+0xae>
 8008ea2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	d002      	beq.n	8008eb0 <__sflush_r+0x8c>
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f7ff fbf2 	bl	8008694 <_free_r>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eb4:	e00d      	b.n	8008ed2 <__sflush_r+0xae>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4628      	mov	r0, r5
 8008eba:	47b0      	blx	r6
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	1c50      	adds	r0, r2, #1
 8008ec0:	d1c9      	bne.n	8008e56 <__sflush_r+0x32>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c6      	beq.n	8008e56 <__sflush_r+0x32>
 8008ec8:	2b1d      	cmp	r3, #29
 8008eca:	d001      	beq.n	8008ed0 <__sflush_r+0xac>
 8008ecc:	2b16      	cmp	r3, #22
 8008ece:	d11e      	bne.n	8008f0e <__sflush_r+0xea>
 8008ed0:	602f      	str	r7, [r5, #0]
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e022      	b.n	8008f1c <__sflush_r+0xf8>
 8008ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eda:	b21b      	sxth	r3, r3
 8008edc:	e01b      	b.n	8008f16 <__sflush_r+0xf2>
 8008ede:	690f      	ldr	r7, [r1, #16]
 8008ee0:	2f00      	cmp	r7, #0
 8008ee2:	d0f6      	beq.n	8008ed2 <__sflush_r+0xae>
 8008ee4:	0793      	lsls	r3, r2, #30
 8008ee6:	680e      	ldr	r6, [r1, #0]
 8008ee8:	bf08      	it	eq
 8008eea:	694b      	ldreq	r3, [r1, #20]
 8008eec:	600f      	str	r7, [r1, #0]
 8008eee:	bf18      	it	ne
 8008ef0:	2300      	movne	r3, #0
 8008ef2:	eba6 0807 	sub.w	r8, r6, r7
 8008ef6:	608b      	str	r3, [r1, #8]
 8008ef8:	f1b8 0f00 	cmp.w	r8, #0
 8008efc:	dde9      	ble.n	8008ed2 <__sflush_r+0xae>
 8008efe:	6a21      	ldr	r1, [r4, #32]
 8008f00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f02:	4643      	mov	r3, r8
 8008f04:	463a      	mov	r2, r7
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b0      	blx	r6
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dc08      	bgt.n	8008f20 <__sflush_r+0xfc>
 8008f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	4407      	add	r7, r0
 8008f22:	eba8 0800 	sub.w	r8, r8, r0
 8008f26:	e7e7      	b.n	8008ef8 <__sflush_r+0xd4>
 8008f28:	dfbffffe 	.word	0xdfbffffe

08008f2c <_fflush_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	4605      	mov	r5, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	b913      	cbnz	r3, 8008f3c <_fflush_r+0x10>
 8008f36:	2500      	movs	r5, #0
 8008f38:	4628      	mov	r0, r5
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	b118      	cbz	r0, 8008f46 <_fflush_r+0x1a>
 8008f3e:	6a03      	ldr	r3, [r0, #32]
 8008f40:	b90b      	cbnz	r3, 8008f46 <_fflush_r+0x1a>
 8008f42:	f7ff f99f 	bl	8008284 <__sinit>
 8008f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f3      	beq.n	8008f36 <_fflush_r+0xa>
 8008f4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f50:	07d0      	lsls	r0, r2, #31
 8008f52:	d404      	bmi.n	8008f5e <_fflush_r+0x32>
 8008f54:	0599      	lsls	r1, r3, #22
 8008f56:	d402      	bmi.n	8008f5e <_fflush_r+0x32>
 8008f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f5a:	f7ff fb8a 	bl	8008672 <__retarget_lock_acquire_recursive>
 8008f5e:	4628      	mov	r0, r5
 8008f60:	4621      	mov	r1, r4
 8008f62:	f7ff ff5f 	bl	8008e24 <__sflush_r>
 8008f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f68:	07da      	lsls	r2, r3, #31
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	d4e4      	bmi.n	8008f38 <_fflush_r+0xc>
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	059b      	lsls	r3, r3, #22
 8008f72:	d4e1      	bmi.n	8008f38 <_fflush_r+0xc>
 8008f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f76:	f7ff fb7d 	bl	8008674 <__retarget_lock_release_recursive>
 8008f7a:	e7dd      	b.n	8008f38 <_fflush_r+0xc>

08008f7c <__swhatbuf_r>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	460c      	mov	r4, r1
 8008f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	b096      	sub	sp, #88	@ 0x58
 8008f88:	4615      	mov	r5, r2
 8008f8a:	461e      	mov	r6, r3
 8008f8c:	da0d      	bge.n	8008faa <__swhatbuf_r+0x2e>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f94:	f04f 0100 	mov.w	r1, #0
 8008f98:	bf14      	ite	ne
 8008f9a:	2340      	movne	r3, #64	@ 0x40
 8008f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	6031      	str	r1, [r6, #0]
 8008fa4:	602b      	str	r3, [r5, #0]
 8008fa6:	b016      	add	sp, #88	@ 0x58
 8008fa8:	bd70      	pop	{r4, r5, r6, pc}
 8008faa:	466a      	mov	r2, sp
 8008fac:	f000 f848 	bl	8009040 <_fstat_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	dbec      	blt.n	8008f8e <__swhatbuf_r+0x12>
 8008fb4:	9901      	ldr	r1, [sp, #4]
 8008fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fbe:	4259      	negs	r1, r3
 8008fc0:	4159      	adcs	r1, r3
 8008fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fc6:	e7eb      	b.n	8008fa0 <__swhatbuf_r+0x24>

08008fc8 <__smakebuf_r>:
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fcc:	079d      	lsls	r5, r3, #30
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	d507      	bpl.n	8008fe4 <__smakebuf_r+0x1c>
 8008fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	2301      	movs	r3, #1
 8008fde:	6163      	str	r3, [r4, #20]
 8008fe0:	b003      	add	sp, #12
 8008fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe4:	ab01      	add	r3, sp, #4
 8008fe6:	466a      	mov	r2, sp
 8008fe8:	f7ff ffc8 	bl	8008f7c <__swhatbuf_r>
 8008fec:	9f00      	ldr	r7, [sp, #0]
 8008fee:	4605      	mov	r5, r0
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff fbba 	bl	800876c <_malloc_r>
 8008ff8:	b948      	cbnz	r0, 800900e <__smakebuf_r+0x46>
 8008ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffe:	059a      	lsls	r2, r3, #22
 8009000:	d4ee      	bmi.n	8008fe0 <__smakebuf_r+0x18>
 8009002:	f023 0303 	bic.w	r3, r3, #3
 8009006:	f043 0302 	orr.w	r3, r3, #2
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	e7e2      	b.n	8008fd4 <__smakebuf_r+0xc>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	6020      	str	r0, [r4, #0]
 8009012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800901e:	b15b      	cbz	r3, 8009038 <__smakebuf_r+0x70>
 8009020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009024:	4630      	mov	r0, r6
 8009026:	f000 f81d 	bl	8009064 <_isatty_r>
 800902a:	b128      	cbz	r0, 8009038 <__smakebuf_r+0x70>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	431d      	orrs	r5, r3
 800903c:	81a5      	strh	r5, [r4, #12]
 800903e:	e7cf      	b.n	8008fe0 <__smakebuf_r+0x18>

08009040 <_fstat_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d07      	ldr	r5, [pc, #28]	@ (8009060 <_fstat_r+0x20>)
 8009044:	2300      	movs	r3, #0
 8009046:	4604      	mov	r4, r0
 8009048:	4608      	mov	r0, r1
 800904a:	4611      	mov	r1, r2
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	f7f7 ff0c 	bl	8000e6a <_fstat>
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	d102      	bne.n	800905c <_fstat_r+0x1c>
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	b103      	cbz	r3, 800905c <_fstat_r+0x1c>
 800905a:	6023      	str	r3, [r4, #0]
 800905c:	bd38      	pop	{r3, r4, r5, pc}
 800905e:	bf00      	nop
 8009060:	20002328 	.word	0x20002328

08009064 <_isatty_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d06      	ldr	r5, [pc, #24]	@ (8009080 <_isatty_r+0x1c>)
 8009068:	2300      	movs	r3, #0
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	f7f7 ff0b 	bl	8000e8a <_isatty>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_isatty_r+0x1a>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_isatty_r+0x1a>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	20002328 	.word	0x20002328

08009084 <_sbrk_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	@ (80090a0 <_sbrk_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7f7 ff14 	bl	8000ebc <_sbrk>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_sbrk_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_sbrk_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20002328 	.word	0x20002328

080090a4 <_init>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	bf00      	nop
 80090a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090aa:	bc08      	pop	{r3}
 80090ac:	469e      	mov	lr, r3
 80090ae:	4770      	bx	lr

080090b0 <_fini>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	bf00      	nop
 80090b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b6:	bc08      	pop	{r3}
 80090b8:	469e      	mov	lr, r3
 80090ba:	4770      	bx	lr
